options {
    STATIC = false;
    UNICODE_INPUT = true;
    DEBUG_LOOKAHEAD = true;
//    DEBUG_PARSER = true;
//    DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Sintatico)
package br.univali.comp.javacc.gen;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import br.univali.comp.recovery.*;
import br.univali.comp.semantica.AcoesSemanticas;
import br.univali.comp.virtualmachine.Instruction;

public class Sintatico {
    private StringBuilder tokens = new StringBuilder();
    private List<String> lexicalErrors = new ArrayList<String>();
    private List<String> syntacticErrors = new ArrayList<String>();
    private List<String> semanticErrors = new ArrayList<String>();
    private Boolean hasLexicalErrors = false;
    public AcoesSemanticas acoesSemanticas = new AcoesSemanticas();
    private List<Instruction> instructionList;

    boolean debug_recovery = true;
    Token lastError = null;

    public void handleToken()  {
            try {
                Token t = null;
                t = getNextToken();
                if(t.kind == EOF) return;
                switch(t.kind){
                    case INTEGER_CONSTANT:{
                        tokens.append("Token: '"+t.image+"' - Type: INTEGER_CONSTANT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case FLOAT_CONSTANT:{
                        tokens.append("Token: '"+t.image+"' - Type: FLOAT_CONSTANT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case LITERAL_CONSTANT:{
                        tokens.append("Token: '"+t.image+"' - Type: LITERAL_CONSTANT-"+t.kind+" - Line-Column-begin: "+t.beginLine+"-"+t.beginColumn+ " ; Line-Column-end: "+t.endLine+"-"+t.endColumn+"\n");
                        break;
                    }
                    case IDENTIFIER:{
                        tokens.append("Token: '"+t.image+"' - Type: IDENTIFIER-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
//                  Simbolos especiais
                    // Pontuação
                    case SS_DOT:
                    case SS_COMMA:
                    case SS_CURLYBRACE_OPEN:
                    case SS_CURLYBRACE_CLOSE:
                    case SS_SQUACEBRACE_OPEN:
                    case SS_SQUAREBRACE_CLOSE:
                    case SS_PARENTESES_OPEN:
                    case SS_PARENTESES_CLOSE:
                    case SS_HEADER:
                    // Simbolos aritiméticos
                    case SS_PLUS:
                    case SS_MINUS:
                    case SS_TIMES:
                    case SS_DIVIDE:
                    case SS_PERCENT:
                    case SS_EXPODENTIAL:
                    case SS_MODULO:
                    // Simbolos lógicos
                    case SS_LESS_THAN:
                    case SS_MORE_THAN:
                    case SS_AND:
                    case SS_OR:
                    case SS_NOT:
                    case SS_EQUALS:
                    case SS_NOT_EQUALS:
                    case SS_LESS_OR_EQUAL_THAN:
                    case SS_MORE_OR_EQUAL_THAN: {
                        tokens.append("Token: '"+t.image+"' - Type: SPECIAL_SYMBOL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
//                  Reserved words
                    case  R_PROGRAM  :
                    case  R_DEFINE   :
                    case  R_NOT      :
                    case  R_VARIABLE :
                    case  R_IS       :
                    case  R_VERIFY   :
                    case  R_EXECUTE  :
                    case  R_SET      :
                    case  R_TO       :
                    case  R_GET      :
                    case  R_PUT      :
                    case  R_LOOP     :
                    case  R_WHILE    :
                    case  R_TRUE     :
                    case  R_FALSE    :
                    case  R_DO       :
                    case  R_NATURAL  :
                    case  R_REAL     :
                    case  R_CHAR     :
                    case  R_BOOLEAN  :
                    {
                        tokens.append("Token: '"+t.image+"' - Type: RESERVED_WORDS-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case ERROR_INVALID_SYMBOL:{
                        tokens.append("ERROR: '"+t.image+"' - Type: ERROR_INVALID_SYMBOL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        lexicalErrors.add("ERROR: '"+t.image+"' - Type: ERROR_INVALID_SYMBOL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn);
                        hasLexicalErrors = true;
                        break;
                    }
                    case ERROR_UNFINISHED_LITERAL_CONSTANT:{
                        tokens.append("ERROR_UNFINISHED_LITERAL_CONSTANT: \n'"+t.image+"' \n Type: ERROR_UNFINISHED_LITERAL_CONSTANT-"+t.kind+" - Line-Column-begin: "+t.beginLine+"-"+t.beginColumn+ " ; Line-Column-end: "+t.endLine+"-"+t.endColumn+"\n");
                        lexicalErrors.add("ERROR_UNFINISHED_LITERAL_CONSTANT: \n'"+t.image+"' \n Type: ERROR_UNFINISHED_LITERAL_CONSTANT-"+t.kind+" - Line-Column-begin: "+t.beginLine+"-"+t.beginColumn+ " ; Line-Column-end: "+t.endLine+"-"+t.endColumn+"\n");
                        hasLexicalErrors = true;
                        break;
                    }
                    case ERROR_INTEGER_CONSTANT_FORMAT:{
                        tokens.append("ERROR: '"+t.image+"' - Type: ERROR_INTEGER_CONSTANT_FORMAT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        lexicalErrors.add("ERROR: '"+t.image+"' - Type: ERROR_INTEGER_CONSTANT_FORMAT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn);
                        hasLexicalErrors = true;
                        break;
                    }
                    case ERROR_FLOAT_CONSTANT_FORMAT:{
                        tokens.append("ERROR: '"+t.image+"' - Type: ERROR_FLOAT_CONSTANT_FORMAT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        lexicalErrors.add("ERROR: '"+t.image+"' - Type: ERROR_FLOAT_CONSTANT_FORMAT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn);
                        hasLexicalErrors = true;
                        break;
                    }
                    default:{
                        tokens.append("<DEFAULT UNFOUND: Image:"+t.image+ " | Kind:" +t.kind +">"+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        lexicalErrors.add("<ERROR - DEFAULT UNFOUND: Image:"+t.image+ " | Kind:" +t.kind +">"+" - Line-Column: "+t.beginLine+"-"+t.beginColumn);
                        hasLexicalErrors = true;
                        break;
                    }
                }
                handleToken();
            }catch(Error error){
                hasLexicalErrors = true;
                tokens.append("Error - " + error.getMessage() + "\n");
                lexicalErrors.add("Error - " + error.getMessage());
                System.out.println(error.toString());
                handleToken();
            }
        }

    private Sintatico readInput(String args[], String textToAnalyze) {
        Sintatico sintatico = null;
        if(args.length == 0){
            System.out.println("Reading from received text!");
            java.io.InputStream targetStream = new java.io.ByteArrayInputStream(textToAnalyze.getBytes());
            sintatico = new Sintatico(targetStream);
        }
        else if(args.length == 1){
            try{
                sintatico = new Sintatico(new java.io.FileInputStream(args[0]));
            }
            catch(java.io.FileNotFoundException e){
                System.err.println(args[0] + " was not found." );
                System.err.println(e);
            }
        }
        else{
            System.out.println("Use:\njava Sintatico < inputFile");
            System.out.println("or java Sintatico inputFile");
        }
        return sintatico;
    }

    public int getCountErrors() {
        return this.syntacticErrors.size();
    }

    public List<String> getSyntacticErrors() {
        return this.syntacticErrors;
    }


    public String analyze(String args[], String textToAnalyze) throws ParseException, ParseEOFException  {
            StringBuilder sb = new StringBuilder("");
            Sintatico sintatico = this.readInput(args, textToAnalyze);

            this.handleToken();
            tokens.append("<EOF>");

            try {
                if(!hasLexicalErrors){
                    sintatico.program();
                } else {
                    sb.append(errorListToString("Lexic errors found!", lexicalErrors));
                    return sb.toString();
                }
            } catch (ParseException ex) {
                System.out.println(ex);
                return ex.getMessage();
            }
            if(syntacticErrors.size() > 0){
                sb.append(errorListToString("Syntax errors found!", syntacticErrors));
                return sb.toString();
            }
            sb.append("Syntax OK!\n");
            this.semanticErrors = acoesSemanticas.getListaErros();
            if (semanticErrors.size() > 0) {
                sb.append(errorListToString("Semantic errors found!", semanticErrors));
                return sb.toString();
            }
            this.instructionList = acoesSemanticas.getInstructionList();
            sb.append("Semantics OK!\n");
            return sb.toString();
        }


    public static void main(String args[])  throws ParseException, ParseEOFException {
        Sintatico parser = new Sintatico( System.in ) ;
        parser.analyze(args, "");
        System.out.println("tokens: " + parser.tokens);
    }


    static public String im(int x) {
        int k;
        String s;
        s = tokenImage[x];
        k = s.lastIndexOf("\"");

        try {
            s = s.substring(1,k);
        } catch (StringIndexOutOfBoundsException e)
            {}
        return s;
    }


    boolean eof;    // variável que indica se EOF foi alcançado
    // o método abaixo consome tokens até alcançar um que pertença ao conjunto
    // de sincronização

    public void consumeUntil(RecoverySet g, ParseException e, String errorMsg, String met)
            throws ParseEOFException, ParseException {

            Token tok;

           if ( debug_recovery) // informação sobre a recuperação
           {
               System.out.println();
               System.out.println("*** " + met + " ***");
               System.out.println("     Syncronizing Set: " + g);
           }

           if (g == null) throw e; // se o conjunto é null, propaga a exceção

           tok = getToken(1); // pega token corrente
           while ( ! eof )  // se não chegou ao fim do arquivo
           {
                if ( g.contains(tok.kind ) ) //achou um token no conjunto
                {
                     if ( debug_recovery)
                        System.out.println("     Found syncronizing token: " + im(tok.kind));
                     break;
                }
                if (debug_recovery)
                    System.out.println("     Ignoring token: " + im(tok.kind));
                getNextToken();     // pega próximo token
                tok = getToken(1);
                if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?
                    eof = true;
           }
           if ( tok != lastError) {
               String output = String.format("\n===| ERROR |===" +
                                             "\nError message: %s"+
                                             "\nFound at line/column [%s:%s]: \""+tok+"\""+
                                             "\nExpected one of: %s"
                ,errorMsg, tok.beginLine, tok.beginColumn, expectedTokens(e) );
                System.out.println(output);
                syntacticErrors.add(output);
                lastError = tok;
           }
           if ( eof ) throw new ParseEOFException("EOF found prematurely.");
        }

    public static List<String> expectedTokens(ParseException e) {
        List<String> output = new ArrayList<String>();
        for (int[] group : e.expectedTokenSequences) {
            for (int tokenConst : group) {
                output.add(SintaticoConstants.tokenImage[tokenConst]);
            }
        }
        return output;
    }

    public String getResults(){
            return tokens.toString();
    }

    public List<Instruction> getInstructions() {
        return this.instructionList;
    }

    public List<String> getSemanticErrorList() {
        return this.semanticErrors;
    }

    public boolean hasAnyErrors() {
        return lexicalErrors.size()!=0 || syntacticErrors.size()!=0 || semanticErrors.size()!= 0;
    }

    public String errorListToString(String message, List<String> errors) {
        StringBuilder sb = new StringBuilder(message);
        sb.append(String.format(" Count %s", errors.size())).append("\n");
        for (String s : errors) {
            sb.append(s).append("\n");
        }
        return sb.toString();
    }
}
PARSER_END(Sintatico)

TOKEN_MGR_DECLS :
{
	static int commentLevel = 0 ;
}

//Skip the following elements
SKIP : {
    <SPACE : " "> |
    <EOL: ("\n" | "\r" | "\n\r")> |
    <SKIP_MARKERS: "\t" | "\r" | "\r\n" | <SPACE> | <EOL>>
}

SKIP : {
    ":*" : COMMENT                     |
    <COMMENT_LINE: ":|" (~["\n", "\r"])* <EOL> >
 }
<COMMENT> SKIP : {
    "*:" : DEFAULT
}
<COMMENT> MORE : {
    <~[]>
}

TOKEN : {
    <INTEGER_CONSTANT: ["0"-"9"] (["0"-"9"])? (["0"-"9"])? >
}
TOKEN : {
    <FLOAT_CONSTANT: ["0"-"9"] (["0"-"9"])? (["0"-"9"])? (["0"-"9"])? (["0"-"9"])? "." ["0"-"9"] (["0"-"9"])? >
}

TOKEN : {
    <LITERAL_CONSTANT: ("\"" (~["\""])* "\"") | ("'" (~["'"])* "'") >
}

TOKEN [IGNORE_CASE]: {
     <R_PROGRAM: "program">
  |  <R_DEFINE: "define">
  |  <R_NOT: "not">
  |  <R_VARIABLE: "variable">
  |  <R_IS: "is">
  |  <R_VERIFY: "verify">
  |  <R_EXECUTE: "execute">
  |  <R_SET: "set">
  |  <R_TO: "to">
  |  <R_GET: "get">
  |  <R_PUT: "put">
  |  <R_LOOP: "loop">
  |  <R_WHILE: "while">
  |  <R_TRUE: "true">
  |  <R_FALSE: "false">
  |  <R_DO: "do">
  |  <R_NATURAL: "natural">
  |  <R_REAL: "real">
  |  <R_CHAR: "char">
  |  <R_BOOLEAN: "boolean">
}
TOKEN : {
    <IDENTIFIER: ( ( ( (["a" - "z", "A" - "Z"] ("_")?) | ("_" (["a" - "z", "A" - "Z"])?) ) ["0"-"9"] ) | ("_" ["a" - "z", "A" - "Z"]) | (["a" - "z", "A" - "Z"]) )* ( ("_") | (["a" - "z", "A" - "Z"]) | (["a" - "z", "A" - "Z"] "_") | ("_" ["a" - "z", "A" - "Z"]) )>
}

//Special symbols
TOKEN : {
    // Pontuação
  <SS_DOT: ".">
  | <SS_COMMA: ",">
  | <SS_CURLYBRACE_OPEN: "{">
  | <SS_CURLYBRACE_CLOSE: "}">
  | <SS_SQUACEBRACE_OPEN: "[">
  | <SS_SQUAREBRACE_CLOSE: "]">
  | <SS_PARENTESES_OPEN: "(">
  | <SS_PARENTESES_CLOSE: ")">
  | <SS_HEADER:  ":-" >
    // Simbolos aritiméticos
  | <SS_PLUS: "+">
  | <SS_MINUS: "-">
  | <SS_TIMES: "*">
  | <SS_DIVIDE: "/">
  | <SS_PERCENT: "%">
  | <SS_EXPODENTIAL: "**">
  | <SS_MODULO: "%%">
  // Simbolos lógicos
  | <SS_LESS_THAN: "<">
  | <SS_MORE_THAN: ">">
  | <SS_AND: "&">
  | <SS_OR: "|">
  | <SS_NOT: "!">
  | <SS_EQUALS: "==">
  | <SS_NOT_EQUALS: "!=">
  | <SS_LESS_OR_EQUAL_THAN: "<=">
  | <SS_MORE_OR_EQUAL_THAN: ">=">
}

TOKEN : {
    <ERROR_INVALID_SYMBOL: ["\u0000" - "\u00ff"] >
    |   <ERROR_UNFINISHED_LITERAL_CONSTANT: ("\"" (~["\""])*) | "'" (~["'"])* >
    |   <ERROR_INTEGER_CONSTANT_FORMAT: ["0"-"9"] ["0"-"9"] ["0"-"9"] (["0"-"9"])+ >
    |   <ERROR_FLOAT_CONSTANT_FORMAT: (["0"-"9"] ["0"-"9"] ["0"-"9"] ["0"-"9"] ["0"-"9"] (["0"-"9"])+ "." (["0"-"9"])*) | ((["0"-"9"])+ "." ["0"-"9"] ["0"-"9"] (["0"-"9"])+) >
}

//SINTATICO NOVO

void program() throws ParseEOFException : {
    RecoverySet g = First.program;
}
{
    try{
        comentario(g)
        <R_PROGRAM> <SS_CURLYBRACE_OPEN>
        declaracaoDeConstantesEVariaveis(g)
        corpoDoPrograma(g)
        <SS_CURLYBRACE_CLOSE>
        identificadorDoPrograma(g) {acoesSemanticas.acao1();}
    }catch(ParseException e){
        consumeUntil(g, e, "Generic error on program formation", "program");
    }
}

void comentario(RecoverySet g) throws ParseEOFException : {
 RecoverySet f = First.header.union(g);
 }
{
    try{
        [<SS_HEADER> <LITERAL_CONSTANT>]
    }catch(ParseException e){
        consumeUntil(f, e, "Invalid header expression, missing literal constant before program", "program");
    }
}

void identificadorDoPrograma(RecoverySet g) throws ParseEOFException : {}
{
    [<IDENTIFIER> {acoesSemanticas.acao2(getToken(0));}]
}

void declaracaoDeConstantesEVariaveis(RecoverySet g) throws ParseEOFException : {
 RecoverySet f = First.define.union(g);
 }
{
    try{
        [<R_DEFINE> <SS_CURLYBRACE_OPEN> constantesEVariaveis(g) <SS_CURLYBRACE_CLOSE>]
    }catch(ParseException e){
        consumeUntil(f, e, "Missing or incorrect define expression:", "execute");
    }
}

void constantesEVariaveis(RecoverySet g) throws ParseEOFException : {}
{
    declaracaoDeConstantes(g) variaveis2(g) | declaracaoDeVariaveis(g) constantes2(g)
}

void declaracaoDeConstantes(RecoverySet g) throws ParseEOFException : {}
{
    <R_NOT> <R_VARIABLE> {acoesSemanticas.acao3();} constantes(g)
}

void constantes(RecoverySet g) throws ParseEOFException : {}
{
    tipo(g) <R_IS> listaDeIdentificadoresDeConstantes(g) {acoesSemanticas.acao4();} valor(g) {acoesSemanticas.acao5(getToken(0).image);} <SS_DOT> constantes1(g)
}

void constantes1(RecoverySet g) throws ParseEOFException : {}
{
    [constantes(g)]
}

void constantes2(RecoverySet g) throws ParseEOFException : {}
{
    [declaracaoDeConstantes(g)]
}

void declaracaoDeVariaveis(RecoverySet g) throws ParseEOFException : {}
{
    <R_VARIABLE> {acoesSemanticas.acao6();} variaveis(g)
}

void variaveis(RecoverySet g) throws ParseEOFException : {}
{
    tipo(g) <R_IS> listaDeIdentificadoresDeVariaveis(g) {acoesSemanticas.acao4();} <SS_DOT> variaveis1(g)
}

void variaveis1(RecoverySet g) throws ParseEOFException: {}
{
    [variaveis(g)]
}

void variaveis2(RecoverySet g) throws ParseEOFException : {}
{
    [declaracaoDeVariaveis(g)]
}

void tipo(RecoverySet g) throws ParseEOFException : {
  RecoverySet f = First.type.union(g);
 }
{
    try{
        <R_NATURAL> {acoesSemanticas.acao7();} | <R_REAL> {acoesSemanticas.acao8();} | <R_CHAR> {acoesSemanticas.acao9();}| <R_BOOLEAN>{acoesSemanticas.acao10(getToken(0));}
    }catch(ParseException e){
        consumeUntil(f, e, "Invalid data type, must be one of: natural, real, char or boolean", "is");
    }
}

void listaDeIdentificadoresDeConstantes(RecoverySet g) throws ParseEOFException : {}
{
    <IDENTIFIER> {acoesSemanticas.acao11(getToken(0));} listaDeIdentificadoresDeConstantes1(g)
}

void listaDeIdentificadoresDeConstantes1(RecoverySet g) throws ParseEOFException : {}
{
    [<SS_COMMA> listaDeIdentificadoresDeConstantes(g)]
}

void listaDeIdentificadoresDeVariaveis(RecoverySet g) throws ParseEOFException : {}
{
    <IDENTIFIER>{acoesSemanticas.acao12(getToken(0));} indice(g) {acoesSemanticas.acao13(getToken(0));} listaDeIdentificadoresDeVariaveis1(g)
}

void listaDeIdentificadoresDeVariaveis1(RecoverySet g) throws ParseEOFException : {}
{
    [<SS_COMMA> listaDeIdentificadoresDeVariaveis(g)]
}

void indice(RecoverySet g) throws ParseEOFException : {}
{
    [<SS_SQUACEBRACE_OPEN> <INTEGER_CONSTANT> {acoesSemanticas.acao14(getToken(0));}<SS_SQUAREBRACE_CLOSE>]
}

void valor(RecoverySet g) throws ParseEOFException : {}
{
    <INTEGER_CONSTANT> | <FLOAT_CONSTANT> | <LITERAL_CONSTANT>
}

void corpoDoPrograma(RecoverySet g) throws ParseEOFException : {
RecoverySet f = First.execute.union(g);
 }
{
    try{
        <R_EXECUTE> <SS_CURLYBRACE_OPEN> listaDeComandos(g) <SS_CURLYBRACE_CLOSE>
    }catch(ParseException e){
        consumeUntil(f, e, "Missing or invalid execute expression", "}");
    }
}

void listaDeComandos(RecoverySet g) throws ParseEOFException : {}
{
    comando(g) <SS_DOT> listaDeComandos1(g)
}

void listaDeComandos1(RecoverySet g) throws ParseEOFException : {}
{
    [listaDeComandos(g)]
}

void comando(RecoverySet g) throws ParseEOFException : {}
{
    atribuicao(g) | entrada(g) | saida(g) | selecao(g) | repeticao(g)
}

void atribuicao(RecoverySet g) throws ParseEOFException : {
RecoverySet f = First.allCommands.union(g);
}
{
    try{
        <R_SET> {acoesSemanticas.acao15();} expressao(g) <R_TO> listaDeIdentificadoresDeVariaveis(g) {acoesSemanticas.acao16();}
    }catch(ParseException e){
        consumeUntil(f, e, "Missing or invalid set expression", "<SS_DOT>");
    }
}

void entrada(RecoverySet g) throws ParseEOFException : {
 RecoverySet f = First.allCommands.union(g);
 }
{
    try{
        <R_GET> {acoesSemanticas.acao17();} <SS_CURLYBRACE_OPEN> listaDeIdentificadoresDeVariaveis(g) <SS_CURLYBRACE_CLOSE>
    }catch(ParseException e){
        consumeUntil(f, e, "Missing or invalid get expression", "<SS_DOT>");
    }
}

void saida(RecoverySet g) throws ParseEOFException : {
 RecoverySet f = First.allCommands.union(g);
 }
{
    try{
        <R_PUT> <SS_CURLYBRACE_OPEN> listaDeIdentificadoresEOuConstantes(g) <SS_CURLYBRACE_CLOSE>
    }catch(ParseException e){
        consumeUntil(f, e, "Missing or invalid put expression", "<SS_DOT>");
    }
}

void listaDeIdentificadoresEOuConstantes(RecoverySet g) throws ParseEOFException : {}
{
    item(g) {acoesSemanticas.acao18();} listaDeIdentificadoresEOuConstantes1(g)
}

void listaDeIdentificadoresEOuConstantes1(RecoverySet g) throws ParseEOFException : {}
{
    [<SS_COMMA> listaDeIdentificadoresEOuConstantes(g)]
}

void item(RecoverySet g) throws ParseEOFException : {}
{
    <IDENTIFIER> {acoesSemanticas.acao19(getToken(0));} indice(g) {acoesSemanticas.acao20(getToken(0));}
    | <INTEGER_CONSTANT> {acoesSemanticas.acao21(Integer.parseInt(getToken(0).image));}
    | <FLOAT_CONSTANT> {acoesSemanticas.acao22(Float.parseFloat(getToken(0).image));}
    | <LITERAL_CONSTANT> {acoesSemanticas.acao23(getToken(0).image);}
}

void selecao(RecoverySet g) throws ParseEOFException : {
 RecoverySet f = First.allCommands.union(g);
 }
{
    try{
    <R_VERIFY> expressao(g) <R_IS> clausulas(g) {acoesSemanticas.acao24();}
    }catch(ParseException e){
       consumeUntil(f, e, "Missing or invalid verify expression", "<SS_DOT>");
    }
}

void clausulas(RecoverySet g) throws ParseEOFException : {}
{
    <R_TRUE> {acoesSemanticas.acao25();} <SS_CURLYBRACE_OPEN> listaDeComandos(g) <SS_CURLYBRACE_CLOSE> falsa(g) |
    <R_FALSE> {acoesSemanticas.acao26();} <SS_CURLYBRACE_OPEN> listaDeComandos(g) <SS_CURLYBRACE_CLOSE> verdadeira(g)
}

void verdadeira(RecoverySet g) throws ParseEOFException : {}
{
    [<R_IS> <R_TRUE> {acoesSemanticas.acao27();} <SS_CURLYBRACE_OPEN> listaDeComandos(g) <SS_CURLYBRACE_CLOSE>]
}

void falsa(RecoverySet g) throws ParseEOFException : {}
{
    [<R_IS> <R_FALSE> {acoesSemanticas.acao27();} <SS_CURLYBRACE_OPEN> listaDeComandos(g) <SS_CURLYBRACE_CLOSE>]
}

void repeticao(RecoverySet g) throws ParseEOFException : {}
{
    <R_LOOP> {acoesSemanticas.acao28();} <SS_CURLYBRACE_OPEN> listaDeComandos(g) <SS_CURLYBRACE_CLOSE> <R_WHILE> expressao(g) {acoesSemanticas.acao29();} <R_IS> <R_TRUE> |
    <R_WHILE> {acoesSemanticas.acao30();} expressao(g) {acoesSemanticas.acao31();} <R_IS> <R_TRUE> <R_DO> <SS_CURLYBRACE_OPEN> listaDeComandos(g) <SS_CURLYBRACE_CLOSE> {acoesSemanticas.acao32();}
}

void expressao(RecoverySet g) throws ParseEOFException : {
 RecoverySet f = First.expression.union(g);
 }
{
    try{
        expressaoAritmeticaOuLogica(g) expressao1(g)
    }catch(ParseException e){
        consumeUntil(f, e, "Invalid arithmetic or logic expression", "is/to");
    }
}

void expressao1(RecoverySet g) throws ParseEOFException : {}
{
    [<SS_EQUALS> expressaoAritmeticaOuLogica(g) {acoesSemanticas.acao33();} |
    <SS_NOT_EQUALS> expressaoAritmeticaOuLogica(g) {acoesSemanticas.acao34();}|
    <SS_LESS_THAN> expressaoAritmeticaOuLogica(g) {acoesSemanticas.acao35();}|
    <SS_MORE_THAN> expressaoAritmeticaOuLogica(g) {acoesSemanticas.acao36();}|
    <SS_LESS_OR_EQUAL_THAN> expressaoAritmeticaOuLogica(g) {acoesSemanticas.acao37();}|
    <SS_MORE_OR_EQUAL_THAN> expressaoAritmeticaOuLogica(g){acoesSemanticas.acao38();}]
}

void expressaoAritmeticaOuLogica(RecoverySet g) throws ParseEOFException : {}
{
    termo2(g) menorPrioridade(g)
}

void menorPrioridade(RecoverySet g) throws ParseEOFException : {}
{
    [<SS_PLUS> termo2(g) menorPrioridade(g) {acoesSemanticas.acao39();} |
    <SS_MINUS> termo2(g) menorPrioridade(g) {acoesSemanticas.acao40();}|
    <SS_OR> termo2(g) menorPrioridade(g){acoesSemanticas.acao41();}]
}

void termo2(RecoverySet g) throws ParseEOFException : {}
{
    termo1(g) mediaPrioridade(g)
}

void mediaPrioridade(RecoverySet g) throws ParseEOFException : {}
{
    [<SS_TIMES> termo1(g) mediaPrioridade(g) {acoesSemanticas.acao42();}|
    <SS_DIVIDE> termo1(g) mediaPrioridade(g) {acoesSemanticas.acao43();}|
    <SS_PERCENT> termo1(g) mediaPrioridade(g) {acoesSemanticas.acao44();}|
    <SS_MODULO> termo1(g) mediaPrioridade(g) {acoesSemanticas.acao45();}|
    <SS_AND> termo1(g) mediaPrioridade(g) {acoesSemanticas.acao46();}]
}

void termo1(RecoverySet g) throws ParseEOFException : {}
{
    elemento(g) maiorPrioridade(g)
}

void maiorPrioridade(RecoverySet g) throws ParseEOFException : {}
{
    [<SS_EXPODENTIAL> elemento(g) maiorPrioridade(g) {acoesSemanticas.acao47();}]
}

void elemento(RecoverySet g) throws ParseEOFException : {}
{
    <IDENTIFIER> {acoesSemanticas.acao19(getToken(0));} indice(g) {acoesSemanticas.acao20(getToken(0));} |
    <INTEGER_CONSTANT> {acoesSemanticas.acao21(Integer.parseInt(getToken(0).image));}|
    <FLOAT_CONSTANT> {acoesSemanticas.acao22(Float.parseFloat(getToken(0).image));}|
    <LITERAL_CONSTANT> {acoesSemanticas.acao23(getToken(0).image);}|
    <R_TRUE> {acoesSemanticas.acao48();}|
    <R_FALSE> {acoesSemanticas.acao49();}|
    <SS_PARENTESES_OPEN> expressao(g) <SS_PARENTESES_CLOSE> |
    <SS_NOT> <SS_PARENTESES_OPEN> expressao(g) <SS_PARENTESES_CLOSE> {acoesSemanticas.acao50();}
}

