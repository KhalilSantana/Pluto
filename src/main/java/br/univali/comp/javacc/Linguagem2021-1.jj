options {
    STATIC = false;
    UNICODE_INPUT = true;
    DEBUG_LOOKAHEAD = true;
//    DEBUG_PARSER = true;
//    DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Sintatico)
package br.univali.comp.javacc.gen;


public class Sintatico {
    private StringBuilder tokens = new StringBuilder();
    private Boolean hasLexicalErrors = false;

    public void handleToken()  {
            try {
                Token t = null;
                t = getNextToken();
                if(t.kind == EOF) return;
                switch(t.kind){
                    case INTEGER_CONSTANT:{
                        tokens.append("Token: '"+t.image+"' - Type: INTEGER_CONSTANT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case FLOAT_CONSTANT:{
                        tokens.append("Token: '"+t.image+"' - Type: FLOAT_CONSTANT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case LITERAL_CONSTANT:{
                        tokens.append("Token: '"+t.image+"' - Type: LITERAL_CONSTANT-"+t.kind+" - Line-Column-begin: "+t.beginLine+"-"+t.beginColumn+ " ; Line-Column-end: "+t.endLine+"-"+t.endColumn+"\n");
                        break;
                    }
                    // Removido de acordo com correção prof.
//                    case ARITHMETIC:{
//                        tokens.append("Token: '"+t.image+"' - Type: ARITHMETIC-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
//                        break;
//                    }
                    case IDENTIFIER:{
                        tokens.append("Token: '"+t.image+"' - Type: IDENTIFIER-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    // Removido de acordo com correção prof.
//                    case LOGICAL:{
//                        tokens.append("Token: '"+t.image+"' - Type: LOGICAL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
//                        break;
//                    }
//                  Simbolos especiais
                    // Pontuação
                    case SS_DOT:
                    case SS_COMMA:
                    case SS_CURLYBRACE_OPEN:
                    case SS_CURLYBRACE_CLOSE:
                    case SS_SQUACEBRACE_OPEN:
                    case SS_SQUAREBRACE_CLOSE:
                    case SS_PARENTESES_OPEN:
                    case SS_PARENTESES_CLOSE:
                    case SS_HEADER:
                    // Simbolos aritiméticos
                    case SS_PLUS:
                    case SS_MINUS:
                    case SS_TIMES:
                    case SS_DIVIDE:
                    case SS_PERCENT:
                    case SS_EXPODENTIAL:
                    case SS_MODULO:
                    // Simbolos lógicos
                    case SS_LESS_THAN:
                    case SS_MORE_THAN:
                    case SS_AND:
                    case SS_OR:
                    case SS_NOT:
                    case SS_EQUALS:
                    case SS_NOT_EQUALS:
                    case SS_LESS_OR_EQUAL_THAN:
                    case SS_MORE_OR_EQUAL_THAN: {
                        tokens.append("Token: '"+t.image+"' - Type: SPECIAL_SYMBOL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
//                  Reserved words
                    case  R_PROGRAM  :
                    case  R_DEFINE   :
                    case  R_NOT      :
                    case  R_VARIABLE :
                    case  R_IS       :
                    case  R_VERIFY   :
                    case  R_EXECUTE  :
                    case  R_SET      :
                    case  R_TO       :
                    case  R_GET      :
                    case  R_PUT      :
                    case  R_LOOP     :
                    case  R_WHILE    :
                    case  R_TRUE     :
                    case  R_FALSE    :
                    case  R_DO       :
                    case  R_NATURAL  :
                    case  R_REAL     :
                    case  R_CHAR     :
                    case  R_BOOLEAN  :
//                    case  R_IF       :
//                    case  R_ELSE     :
                    {
                        tokens.append("Token: '"+t.image+"' - Type: RESERVED_WORDS-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
//                    TO generic errors
//                    case ERROR:{
//                        tokens.append("ERROR: '"+t.image+"' - Type: Invalid Token-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
//                        break;
//                    }
                    case ERROR_INVALID_SYMBOL:{
                        tokens.append("ERROR: '"+t.image+"' - Type: ERROR_INVALID_SYMBOL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        hasLexicalErrors = true;
                        break;
                    }
                    case ERROR_UNFINISHED_LITERAL_CONSTANT:{
                        tokens.append("ERROR_UNFINISHED_LITERAL_CONSTANT: \n'"+t.image+"' \n Type: ERROR_UNFINISHED_LITERAL_CONSTANT-"+t.kind+" - Line-Column-begin: "+t.beginLine+"-"+t.beginColumn+ " ; Line-Column-end: "+t.endLine+"-"+t.endColumn+"\n");
                        hasLexicalErrors = true;
                        break;
                    }
                    case ERROR_INTEGER_CONSTANT_FORMAT:{
                        tokens.append("ERROR: '"+t.image+"' - Type: ERROR_INTEGER_CONSTANT_FORMAT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        hasLexicalErrors = true;
                        break;
                    }
                    case ERROR_FLOAT_CONSTANT_FORMAT:{
                        tokens.append("ERROR: '"+t.image+"' - Type: ERROR_FLOAT_CONSTANT_FORMAT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        hasLexicalErrors = true;
                        break;
                    }
                    default:{
                        tokens.append("<DEFAULT UNFOUND: Image:"+t.image+ " | Kind:" +t.kind +">"+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        hasLexicalErrors = true;
                        break;
                    }
                }
                handleToken();
            }catch(Error error){
                hasLexicalErrors = true;
                tokens.append("Error - " + error.getMessage() + "\n");
                System.out.println(error.toString());
                handleToken();
            }
        }

    private Sintatico readInput(String args[], String textToAnalyze) {
        Sintatico sintatico = null;
        if(args.length == 0){
            System.out.println("Reading from received text!");
            java.io.InputStream targetStream = new java.io.ByteArrayInputStream(textToAnalyze.getBytes());
            sintatico = new Sintatico(targetStream);
        }
        else if(args.length == 1){
            try{
                sintatico = new Sintatico(new java.io.FileInputStream(args[0]));
            }
            catch(java.io.FileNotFoundException e){
                System.err.println(args[0] + " was not found." );
                System.err.println(e);
            }
        }
        else{
            System.out.println("Use:\njava Sintatico < inputFile");
            System.out.println("or java Sintatico inputFile");
        }
        return sintatico;
    }

    public String analyze(String args[], String textToAnalyze) throws ParseException  {
            Sintatico sintatico = this.readInput(args, textToAnalyze);

            this.handleToken();
            tokens.append("<EOF>");

            try {
                if(!hasLexicalErrors){
                    sintatico.program();
                } else {
                    return tokens.toString();
                }
            } catch (ParseException ex) {
                return ex.getMessage().toString();
            }
            return "Sintaticamente correto!";
        }


    public static void main(String args[])  throws ParseException {
        Sintatico parser = new Sintatico( System.in ) ;
        parser.analyze(args, "");
        System.out.println("tokens: " + parser.tokens);
    }

    public String getResults(){
            return tokens.toString();
    }

}
PARSER_END(Sintatico)

TOKEN_MGR_DECLS :
{
	static int commentLevel = 0 ;
}




//Skip the following elements
SKIP : {
    <SPACE : " "> |
    <EOL: ("\n" | "\r" | "\n\r")> |
    <SKIP_MARKERS: "\t" | "\r" | "\r\n" | <SPACE> | <EOL>>
}

SKIP : {
    ":*" : COMMENT                     |
    <COMMENT_LINE: ":|" (~["\n", "\r"])* <EOL> >
 }
<COMMENT> SKIP : {
    "*:" : DEFAULT
}
<COMMENT> MORE : {
    <~[]>
}

TOKEN : {
    <INTEGER_CONSTANT: ["0"-"9"] (["0"-"9"])? (["0"-"9"])? >
}
TOKEN : {
    <FLOAT_CONSTANT: ["0"-"9"] (["0"-"9"])? (["0"-"9"])? (["0"-"9"])? (["0"-"9"])? "." ["0"-"9"] (["0"-"9"])? >
}

TOKEN : {
    <LITERAL_CONSTANT: ("\"" (~["\""])* "\"") | ("'" (~["'"])* "'") >
}

// Removido de acordo com correção prof.
//TOKEN: {
//    <ARITHMETIC: ["+", "-", "*", "/", "%"] | "**" | "%%" >
//}
TOKEN [IGNORE_CASE]: {
     <R_PROGRAM: "program">
  |  <R_DEFINE: "define">
  |  <R_NOT: "not">
  |  <R_VARIABLE: "variable">
  |  <R_IS: "is">
  |  <R_VERIFY: "verify">
  |  <R_EXECUTE: "execute">
  |  <R_SET: "set">
  |  <R_TO: "to">
  |  <R_GET: "get">
  |  <R_PUT: "put">
  |  <R_LOOP: "loop">
  |  <R_WHILE: "while">
  |  <R_TRUE: "true">
  |  <R_FALSE: "false">
  |  <R_DO: "do">
  |  <R_NATURAL: "natural">
  |  <R_REAL: "real">
  |  <R_CHAR: "char">
  |  <R_BOOLEAN: "boolean">
//  |  <R_IF: "if">
//  |  <R_ELSE: "else">
}
TOKEN : {
    <IDENTIFIER: ( ( ( (["a" - "z", "A" - "Z"] ("_")?) | ("_" (["a" - "z", "A" - "Z"])?) ) ["0"-"9"] ) | ("_" ["a" - "z", "A" - "Z"]) | (["a" - "z", "A" - "Z"]) )* ( ("_") | (["a" - "z", "A" - "Z"]) | (["a" - "z", "A" - "Z"] "_") | ("_" ["a" - "z", "A" - "Z"]) )>
}

// Removido de acordo com correção prof.
//TOKEN : {
//    <LOGICAL: ["<", ">", "&", "|", "!"] | "==" | "!=" | "<=" | ">=">


//TOKEN : {
//    <SPECIAL_SYMBOL: [".", ",", "{", "}", "[", "]", "(", ")"] | ":-" |
//                     // Simbolos aritimético
//                     ["+", "-", "*", "/", "%"] | "**" | "%%" |
//                     // Simbolos lógicos
//                     ["<", ">", "&", "|", "!"] | "==" | "!=" | "<=" | ">="
//    >
//}

//Special symbols
TOKEN : {
    // Pontuação
  <SS_DOT: ".">
  | <SS_COMMA: ",">
  | <SS_CURLYBRACE_OPEN: "{">
  | <SS_CURLYBRACE_CLOSE: "}">
  | <SS_SQUACEBRACE_OPEN: "[">
  | <SS_SQUAREBRACE_CLOSE: "]">
  | <SS_PARENTESES_OPEN: "(">
  | <SS_PARENTESES_CLOSE: ")">
  | <SS_HEADER:  ":-" >
    // Simbolos aritiméticos
  | <SS_PLUS: "+">
  | <SS_MINUS: "-">
  | <SS_TIMES: "*">
  | <SS_DIVIDE: "/">
  | <SS_PERCENT: "%">
  | <SS_EXPODENTIAL: "**">
  | <SS_MODULO: "%%">
  // Simbolos lógicos
  | <SS_LESS_THAN: "<">
  | <SS_MORE_THAN: ">">
  | <SS_AND: "&">
  | <SS_OR: "|">
  | <SS_NOT: "!">
  | <SS_EQUALS: "==">
  | <SS_NOT_EQUALS: "!=">
  | <SS_LESS_OR_EQUAL_THAN: "<=">
  | <SS_MORE_OR_EQUAL_THAN: ">=">
}

TOKEN : {
    <ERROR_INVALID_SYMBOL: ["\u0000" - "\u00ff"] >
    |   <ERROR_UNFINISHED_LITERAL_CONSTANT: ("\"" (~["\""])*) | "'" (~["'"])* >
    |   <ERROR_INTEGER_CONSTANT_FORMAT: ["0"-"9"] ["0"-"9"] ["0"-"9"] (["0"-"9"])+ >
    |   <ERROR_FLOAT_CONSTANT_FORMAT: (["0"-"9"] ["0"-"9"] ["0"-"9"] ["0"-"9"] ["0"-"9"] (["0"-"9"])+ "." (["0"-"9"])*) | ((["0"-"9"])+ "." ["0"-"9"] ["0"-"9"] (["0"-"9"])+) >
}

void program() : {}
{
    linguagem2021_1() <EOF>
}
void linguagem2021_1() : {}
{
    header() <R_PROGRAM> <SS_CURLYBRACE_OPEN> define() execute() <SS_CURLYBRACE_CLOSE> ident_final()
}
void header() : {}
{
    [ <SS_HEADER> <LITERAL_CONSTANT> ]
}
void ident_final() : {}
{
    [ <IDENTIFIER> ]
}
void todos_os_comandos() : {}
{
        loops_repeticao()
    |   verify()
    |   get()
    |   set()
    |   put()
}
void lista_de_comandos() : {}
{
    todos_os_comandos() lista_de_comandos_opt()
}
void lista_de_comandos_opt() : {}
{
    (todos_os_comandos() <SS_DOT>)*
}
void lista_de_identificadores() : {}
{
    <IDENTIFIER> lista_opt_de_identificadores()
}
void lista_opt_de_identificadores() : {}
{
    [ <SS_COMMA> lista_de_identificadores() ]
}
// BEGIN define
// TODO: see notes on the BNF google doc, this is a temporary implentation
// <valor> seems equal to <constante>
void define() : {}
{
    [ <R_DEFINE> <SS_CURLYBRACE_OPEN> dec_const_e_ou_var() <SS_CURLYBRACE_CLOSE> ]
}
void lista_atribuicao() : {}
{
    [ atribuicao() lista_atribuicao() ]
}
void atribuicao() : {}
{
    tipo() <R_IS> lista_de_identificadores()
}
void atribuicao_final() : {}
{
    atribuicao() lista_atribuicao()
}
void valor_opcional() : {}
{
    [ constante() ]
}
void dec_const_e_ou_var() : {}
{
    dec_const_opt_var() | dec_var_opt_const()
}
void dec_const_opt_var() : {}
{
    <R_NOT> <R_VARIABLE> atribuicao_final() constante() <SS_DOT> dec_var_opt()
}
void dec_var_opt() : {}
{
    [ <R_VARIABLE> atribuicao_final() valor_opcional() <SS_DOT> ]
}
void dec_var_opt_const() : {}
{
    <R_VARIABLE> atribuicao_final() valor_opcional()  <SS_DOT> dec_const_opt()
}
void dec_const_opt() : {}
{
    [ <R_NOT> <R_VARIABLE> atribuicao_final() constante() ]
}
void tipo() : {}
{
    <R_NATURAL> | <R_REAL> |  <R_CHAR> | <R_BOOLEAN>
}
// BEGIN loops
void loops_repeticao() : {}
{
    while_expr() | do_loop()
}
void while_expr() : {}
{
    <R_WHILE> expressao() <R_IS> <R_TRUE> <R_DO> <SS_CURLYBRACE_OPEN> lista_de_comandos() <SS_CURLYBRACE_CLOSE>
}
void do_loop() : {}
{
    <R_LOOP> <SS_CURLYBRACE_OPEN> lista_de_comandos() <SS_CURLYBRACE_CLOSE> <R_WHILE> expressao() <R_IS> <R_TRUE>
}
// BEGIN execute
void execute() : {}
{
    <R_EXECUTE> <SS_CURLYBRACE_OPEN> lista_de_comandos() <SS_CURLYBRACE_CLOSE>
}
// BEGIN get
void get() : {}
{
    <R_GET>  <SS_CURLYBRACE_OPEN> lista_de_identificadores() <SS_CURLYBRACE_CLOSE>
}
// BEGIN set
void set() : {}
{
    <R_SET> expressao() <R_TO> lista_de_identificadores()
}
// BEGIN put
void put() : {}
// TODO: validate this, see note on the BNF google doc
{
    <R_PUT> <SS_CURLYBRACE_OPEN> identificador_ou_constante() lista_de_identificadores_e_ou_constantes() <SS_CURLYBRACE_CLOSE>
}
void identificador_ou_constante() : {}
{
// TODO: double check this, see note on the BNF google doc
    <IDENTIFIER> | constante()
}
void lista_de_identificadores_e_ou_constantes() : {}
{
    [ <SS_COMMA> identificador_ou_constante() lista_de_identificadores_e_ou_constantes() ]
}
void constante() : {}
{
    <FLOAT_CONSTANT> | <INTEGER_CONSTANT> | <LITERAL_CONSTANT>
}
// BEGIN verify
void verify() : {}
{
    <R_VERIFY> expressao() <R_IS> verify_truefalse()
}
void verify_truefalse() : {}
{
    verify_true() | verify_false()
}
void verify_true() : {}
{
    <R_TRUE> <SS_CURLYBRACE_OPEN> lista_de_comandos() <SS_CURLYBRACE_CLOSE> verify_opt_false()
}
void verify_opt_false() : {}
{
  [
    <R_IS> <R_FALSE> <SS_CURLYBRACE_OPEN> lista_de_comandos() <SS_CURLYBRACE_CLOSE>
  ]
}
void verify_false() : {}
{
    <R_FALSE> <SS_CURLYBRACE_OPEN> lista_de_comandos() <SS_CURLYBRACE_CLOSE> verify_opt_true()
}
void verify_opt_true() : {}
{
  [
    <R_IS> <R_TRUE> <SS_CURLYBRACE_OPEN> lista_de_comandos() <SS_CURLYBRACE_CLOSE>
  ]
}
// BEGIN espressao
void expressao() : {}
{
    expressao_aritmetica_ou_logica() expressao_dash()
}
void expressao_dash() : {}
{
    [
          <SS_EQUALS>     expressao_aritmetica_ou_logica()
        | <SS_NOT_EQUALS> expressao_aritmetica_ou_logica()
        | <SS_LESS_THAN>  expressao_aritmetica_ou_logica()
        | <SS_MORE_THAN>  expressao_aritmetica_ou_logica()
        | <SS_LESS_OR_EQUAL_THAN> expressao_aritmetica_ou_logica()
        | <SS_MORE_OR_EQUAL_THAN> expressao_aritmetica_ou_logica()
    ]
}
void expressao_aritmetica_ou_logica() : {}
{
    termo2() menor_prioridade()
}
void menor_prioridade() : {}
{
    [
         <SS_PLUS> termo2() menor_prioridade()
       | <SS_MINUS> termo2() menor_prioridade()
       | <SS_OR> termo2() menor_prioridade()
    ]
}
void termo2() : {}
{
    termo1() media_prioridade()
}
void media_prioridade() : {}
{
    [
        <SS_TIMES>   termo1() media_prioridade()
      | <SS_DIVIDE>  termo1() media_prioridade()
      | <SS_PERCENT> termo1() media_prioridade()
      | <SS_MODULO>  termo1() media_prioridade()
      | <SS_AND>     termo1() media_prioridade()
    ]
}
void termo1() : {}
{
    elemento() maior_prioridade()
}
void maior_prioridade() : {}
{
    [
        <SS_EXPODENTIAL> elemento() maior_prioridade()
    ]
}
void elemento() : {}
{
        <IDENTIFIER> indice()
     |  <INTEGER_CONSTANT>
     |  <FLOAT_CONSTANT>
     |  <LITERAL_CONSTANT>
     |  <R_TRUE>
     |  <R_FALSE>
     |  <SS_PARENTESES_OPEN> expressao() <SS_PARENTESES_CLOSE>
     |  <SS_NOT> <SS_PARENTESES_OPEN> expressao() <SS_PARENTESES_CLOSE>
}
void indice() : {}
{
    [ <SS_SQUACEBRACE_OPEN> <INTEGER_CONSTANT> <SS_PARENTESES_CLOSE> ]
}