options {
    STATIC = false;
    UNICODE_INPUT = true;
    DEBUG_LOOKAHEAD = true;
//    DEBUG_PARSER = true;
//    DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Sintatico)
package br.univali.comp.javacc.gen;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import br.univali.comp.recovery.*;
import br.univali.comp.semantica.AcoesSemanticas;
import br.univali.comp.virtualmachine.Instruction;

public class Sintatico {
    private StringBuilder tokens = new StringBuilder();
    private StringBuilder lexicalErrors = new StringBuilder("");
    public StringBuilder syntacticErrors = new StringBuilder("Syntactic errors:\n");
    private Boolean hasLexicalErrors = false;
    public int contParseError = 0;
    public static AcoesSemanticas acoesSemanticas = new AcoesSemanticas();

    boolean debug_recovery = true;
    Token lastError = null;

    public void handleToken()  {
            try {
                Token t = null;
                t = getNextToken();
                if(t.kind == EOF) return;
                switch(t.kind){
                    case INTEGER_CONSTANT:{
                        tokens.append("Token: '"+t.image+"' - Type: INTEGER_CONSTANT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case FLOAT_CONSTANT:{
                        tokens.append("Token: '"+t.image+"' - Type: FLOAT_CONSTANT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case LITERAL_CONSTANT:{
                        tokens.append("Token: '"+t.image+"' - Type: LITERAL_CONSTANT-"+t.kind+" - Line-Column-begin: "+t.beginLine+"-"+t.beginColumn+ " ; Line-Column-end: "+t.endLine+"-"+t.endColumn+"\n");
                        break;
                    }
                    case IDENTIFIER:{
                        tokens.append("Token: '"+t.image+"' - Type: IDENTIFIER-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
//                  Simbolos especiais
                    // Pontuação
                    case SS_DOT:
                    case SS_COMMA:
                    case SS_CURLYBRACE_OPEN:
                    case SS_CURLYBRACE_CLOSE:
                    case SS_SQUACEBRACE_OPEN:
                    case SS_SQUAREBRACE_CLOSE:
                    case SS_PARENTESES_OPEN:
                    case SS_PARENTESES_CLOSE:
                    case SS_HEADER:
                    // Simbolos aritiméticos
                    case SS_PLUS:
                    case SS_MINUS:
                    case SS_TIMES:
                    case SS_DIVIDE:
                    case SS_PERCENT:
                    case SS_EXPODENTIAL:
                    case SS_MODULO:
                    // Simbolos lógicos
                    case SS_LESS_THAN:
                    case SS_MORE_THAN:
                    case SS_AND:
                    case SS_OR:
                    case SS_NOT:
                    case SS_EQUALS:
                    case SS_NOT_EQUALS:
                    case SS_LESS_OR_EQUAL_THAN:
                    case SS_MORE_OR_EQUAL_THAN: {
                        tokens.append("Token: '"+t.image+"' - Type: SPECIAL_SYMBOL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
//                  Reserved words
                    case  R_PROGRAM  :
                    case  R_DEFINE   :
                    case  R_NOT      :
                    case  R_VARIABLE :
                    case  R_IS       :
                    case  R_VERIFY   :
                    case  R_EXECUTE  :
                    case  R_SET      :
                    case  R_TO       :
                    case  R_GET      :
                    case  R_PUT      :
                    case  R_LOOP     :
                    case  R_WHILE    :
                    case  R_TRUE     :
                    case  R_FALSE    :
                    case  R_DO       :
                    case  R_NATURAL  :
                    case  R_REAL     :
                    case  R_CHAR     :
                    case  R_BOOLEAN  :
                    {
                        tokens.append("Token: '"+t.image+"' - Type: RESERVED_WORDS-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case ERROR_INVALID_SYMBOL:{
                        tokens.append("ERROR: '"+t.image+"' - Type: ERROR_INVALID_SYMBOL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        lexicalErrors.append("ERROR: '"+t.image+"' - Type: ERROR_INVALID_SYMBOL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        hasLexicalErrors = true;
                        break;
                    }
                    case ERROR_UNFINISHED_LITERAL_CONSTANT:{
                        tokens.append("ERROR_UNFINISHED_LITERAL_CONSTANT: \n'"+t.image+"' \n Type: ERROR_UNFINISHED_LITERAL_CONSTANT-"+t.kind+" - Line-Column-begin: "+t.beginLine+"-"+t.beginColumn+ " ; Line-Column-end: "+t.endLine+"-"+t.endColumn+"\n");
                        lexicalErrors.append("ERROR_UNFINISHED_LITERAL_CONSTANT: \n'"+t.image+"' \n Type: ERROR_UNFINISHED_LITERAL_CONSTANT-"+t.kind+" - Line-Column-begin: "+t.beginLine+"-"+t.beginColumn+ " ; Line-Column-end: "+t.endLine+"-"+t.endColumn+"\n");
                        hasLexicalErrors = true;
                        break;
                    }
                    case ERROR_INTEGER_CONSTANT_FORMAT:{
                        tokens.append("ERROR: '"+t.image+"' - Type: ERROR_INTEGER_CONSTANT_FORMAT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        lexicalErrors.append("ERROR: '"+t.image+"' - Type: ERROR_INTEGER_CONSTANT_FORMAT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        hasLexicalErrors = true;
                        break;
                    }
                    case ERROR_FLOAT_CONSTANT_FORMAT:{
                        tokens.append("ERROR: '"+t.image+"' - Type: ERROR_FLOAT_CONSTANT_FORMAT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        lexicalErrors.append("ERROR: '"+t.image+"' - Type: ERROR_FLOAT_CONSTANT_FORMAT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        hasLexicalErrors = true;
                        break;
                    }
                    default:{
                        tokens.append("<DEFAULT UNFOUND: Image:"+t.image+ " | Kind:" +t.kind +">"+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        lexicalErrors.append("<ERROR - DEFAULT UNFOUND: Image:"+t.image+ " | Kind:" +t.kind +">"+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        hasLexicalErrors = true;
                        break;
                    }
                }
                handleToken();
            }catch(Error error){
                hasLexicalErrors = true;
                tokens.append("Error - " + error.getMessage() + "\n");
                lexicalErrors.append("Error - " + error.getMessage() + "\n");
                System.out.println(error.toString());
                handleToken();
            }
        }

    private Sintatico readInput(String args[], String textToAnalyze) {
        Sintatico sintatico = null;
        if(args.length == 0){
            System.out.println("Reading from received text!");
            java.io.InputStream targetStream = new java.io.ByteArrayInputStream(textToAnalyze.getBytes());
            sintatico = new Sintatico(targetStream);
        }
        else if(args.length == 1){
            try{
                sintatico = new Sintatico(new java.io.FileInputStream(args[0]));
            }
            catch(java.io.FileNotFoundException e){
                System.err.println(args[0] + " was not found." );
                System.err.println(e);
            }
        }
        else{
            System.out.println("Use:\njava Sintatico < inputFile");
            System.out.println("or java Sintatico inputFile");
        }
        return sintatico;
    }

    public int getCountErrors() {
        return this.contParseError;
    }

    public String getSyntacticErrors() {
        return this.syntacticErrors.toString();
    }


    public String analyze(String args[], String textToAnalyze) throws ParseException, ParseEOFException  {
            Sintatico sintatico = this.readInput(args, textToAnalyze);

            this.handleToken();
            tokens.append("<EOF>");

            try {
                if(!hasLexicalErrors){
                    sintatico.program();
                } else {
                    return lexicalErrors.toString();
                }
            } catch (ParseException ex) {
                return ex.getMessage().toString();
            }
            if(sintatico.getCountErrors() > 0){
             return "This program has + " + sintatico.getCountErrors() + " syntactic errors \n" + sintatico.getSyntacticErrors();
            }
            return "Syntactically correct!";
        }


    public static void main(String args[])  throws ParseException, ParseEOFException {
        Sintatico parser = new Sintatico( System.in ) ;
        parser.analyze(args, "");
        System.out.println("tokens: " + parser.tokens);
    }


    static public String im(int x) {
        int k;
        String s;
        s = tokenImage[x];
        k = s.lastIndexOf("\"");

        try {
            s = s.substring(1,k);
        } catch (StringIndexOutOfBoundsException e)
            {}
        return s;
    }


    boolean eof;    // variável que indica se EOF foi alcançado
    // o método abaixo consome tokens até alcançar um que pertença ao conjunto
    // de sincronização

    public void consumeUntil(RecoverySet g, ParseException e, String errorMsg, String met)
            throws ParseEOFException, ParseException {

            Token tok;

           if ( debug_recovery) // informação sobre a recuperação
           {
               System.out.println();
               System.out.println("*** " + met + " ***");
               System.out.println("     Syncronizing Set: " + g);
           }

           if (g == null) throw e; // se o conjunto é null, propaga a exceção

           tok = getToken(1); // pega token corrente
           while ( ! eof )  // se não chegou ao fim do arquivo
           {
                if ( g.contains(tok.kind ) ) //achou um token no conjunto
                {
                     if ( debug_recovery)
                        System.out.println("     Found syncronizing token: " + im(tok.kind));
                     break;
                }
                if (debug_recovery)
                    System.out.println("     Ignoring token: " + im(tok.kind));
                getNextToken();     // pega próximo token
                tok = getToken(1);
                if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?
                    eof = true;
           }
           if ( tok != lastError) {
               String output = String.format("\n===| ERROR |===" +
                                             "\nError message: %s"+
                                             "\nFound at line/column [%s:%s]: \""+tok+"\""+
                                             "\nExpected one of: %s"
                ,errorMsg, tok.beginLine, tok.beginColumn, expectedTokens(e) );
                System.out.println(output);
                syntacticErrors.append(output);
                lastError = tok;
                contParseError++;  // incrementa número de erros
           }
           if ( eof ) throw new ParseEOFException("EOF found prematurely.");
        }

    public static List<String> expectedTokens(ParseException e) {
        List<String> output = new ArrayList<String>();
        for (int[] group : e.expectedTokenSequences) {
            for (int tokenConst : group) {
                output.add(SintaticoConstants.tokenImage[tokenConst]);
            }
        }
        return output;
    }

    public String getResults(){
            return tokens.toString();
    }

    public List<Instruction> getInstructions() {
        return acoesSemanticas.getInstructionList();
    }

    public List<String> getSemanticErrorList() {
        return acoesSemanticas.getListaErros();
    }

}
PARSER_END(Sintatico)

TOKEN_MGR_DECLS :
{
	static int commentLevel = 0 ;
}

//Skip the following elements
SKIP : {
    <SPACE : " "> |
    <EOL: ("\n" | "\r" | "\n\r")> |
    <SKIP_MARKERS: "\t" | "\r" | "\r\n" | <SPACE> | <EOL>>
}

SKIP : {
    ":*" : COMMENT                     |
    <COMMENT_LINE: ":|" (~["\n", "\r"])* <EOL> >
 }
<COMMENT> SKIP : {
    "*:" : DEFAULT
}
<COMMENT> MORE : {
    <~[]>
}

TOKEN : {
    <INTEGER_CONSTANT: ["0"-"9"] (["0"-"9"])? (["0"-"9"])? >
}
TOKEN : {
    <FLOAT_CONSTANT: ["0"-"9"] (["0"-"9"])? (["0"-"9"])? (["0"-"9"])? (["0"-"9"])? "." ["0"-"9"] (["0"-"9"])? >
}

TOKEN : {
    <LITERAL_CONSTANT: ("\"" (~["\""])* "\"") | ("'" (~["'"])* "'") >
}

TOKEN [IGNORE_CASE]: {
     <R_PROGRAM: "program">
  |  <R_DEFINE: "define">
  |  <R_NOT: "not">
  |  <R_VARIABLE: "variable">
  |  <R_IS: "is">
  |  <R_VERIFY: "verify">
  |  <R_EXECUTE: "execute">
  |  <R_SET: "set">
  |  <R_TO: "to">
  |  <R_GET: "get">
  |  <R_PUT: "put">
  |  <R_LOOP: "loop">
  |  <R_WHILE: "while">
  |  <R_TRUE: "true">
  |  <R_FALSE: "false">
  |  <R_DO: "do">
  |  <R_NATURAL: "natural">
  |  <R_REAL: "real">
  |  <R_CHAR: "char">
  |  <R_BOOLEAN: "boolean">
}
TOKEN : {
    <IDENTIFIER: ( ( ( (["a" - "z", "A" - "Z"] ("_")?) | ("_" (["a" - "z", "A" - "Z"])?) ) ["0"-"9"] ) | ("_" ["a" - "z", "A" - "Z"]) | (["a" - "z", "A" - "Z"]) )* ( ("_") | (["a" - "z", "A" - "Z"]) | (["a" - "z", "A" - "Z"] "_") | ("_" ["a" - "z", "A" - "Z"]) )>
}

//Special symbols
TOKEN : {
    // Pontuação
  <SS_DOT: ".">
  | <SS_COMMA: ",">
  | <SS_CURLYBRACE_OPEN: "{">
  | <SS_CURLYBRACE_CLOSE: "}">
  | <SS_SQUACEBRACE_OPEN: "[">
  | <SS_SQUAREBRACE_CLOSE: "]">
  | <SS_PARENTESES_OPEN: "(">
  | <SS_PARENTESES_CLOSE: ")">
  | <SS_HEADER:  ":-" >
    // Simbolos aritiméticos
  | <SS_PLUS: "+">
  | <SS_MINUS: "-">
  | <SS_TIMES: "*">
  | <SS_DIVIDE: "/">
  | <SS_PERCENT: "%">
  | <SS_EXPODENTIAL: "**">
  | <SS_MODULO: "%%">
  // Simbolos lógicos
  | <SS_LESS_THAN: "<">
  | <SS_MORE_THAN: ">">
  | <SS_AND: "&">
  | <SS_OR: "|">
  | <SS_NOT: "!">
  | <SS_EQUALS: "==">
  | <SS_NOT_EQUALS: "!=">
  | <SS_LESS_OR_EQUAL_THAN: "<=">
  | <SS_MORE_OR_EQUAL_THAN: ">=">
}

TOKEN : {
    <ERROR_INVALID_SYMBOL: ["\u0000" - "\u00ff"] >
    |   <ERROR_UNFINISHED_LITERAL_CONSTANT: ("\"" (~["\""])*) | "'" (~["'"])* >
    |   <ERROR_INTEGER_CONSTANT_FORMAT: ["0"-"9"] ["0"-"9"] ["0"-"9"] (["0"-"9"])+ >
    |   <ERROR_FLOAT_CONSTANT_FORMAT: (["0"-"9"] ["0"-"9"] ["0"-"9"] ["0"-"9"] ["0"-"9"] (["0"-"9"])+ "." (["0"-"9"])*) | ((["0"-"9"])+ "." ["0"-"9"] ["0"-"9"] (["0"-"9"])+) >
}

//SINTATICO NOVO

void program() : {}
{
    comentario()
    <R_PROGRAM> <SS_CURLYBRACE_OPEN>
    declaracaoDeConstantesEVariaveis()
    corpoDoPrograma()
    <SS_CURLYBRACE_CLOSE>
    identificadorDoPrograma() {acoesSemanticas.acao1();}
}

void comentario() : {}
{
    [<SS_HEADER> <LITERAL_CONSTANT>]
}

void identificadorDoPrograma() : {}
{
    [<IDENTIFIER> {acoesSemanticas.acao2(getToken(0).image);}]
}

void declaracaoDeConstantesEVariaveis() : {}
{
    [<R_DEFINE> <SS_CURLYBRACE_OPEN> constantesEVariaveis() <SS_CURLYBRACE_CLOSE>]
}

void constantesEVariaveis() : {}
{
    declaracaoDeConstantes() variaveis2() | declaracaoDeVariaveis() constantes2()
}

void declaracaoDeConstantes() : {}
{
    <R_NOT> <R_VARIABLE> {acoesSemanticas.acao3();} constantes()
}

void constantes() : {}
{
    tipo() <R_IS> listaDeIdentificadoresDeConstantes() {acoesSemanticas.acao4();} valor() {acoesSemanticas.acao5(getToken(0).image);} <SS_DOT> constantes1()
}

void constantes1() : {}
{
    [constantes()]
}

void constantes2() : {}
{
    [declaracaoDeConstantes()]
}

void declaracaoDeVariaveis() : {}
{
    <R_VARIABLE> {acoesSemanticas.acao6();} variaveis()
}

void variaveis() : {}
{
    tipo() <R_IS> listaDeIdentificadoresDeVariaveis() {acoesSemanticas.acao4();} <SS_DOT> variaveis1()
}

void variaveis1() : {}
{
    [variaveis()]
}

void variaveis2() : {}
{
    [declaracaoDeVariaveis()]
}

void tipo() : {}
{
    <R_NATURAL> {acoesSemanticas.acao7();} | <R_REAL> {acoesSemanticas.acao8();} | <R_CHAR> {acoesSemanticas.acao9();}| <R_BOOLEAN>{acoesSemanticas.acao10();}
}

void listaDeIdentificadoresDeConstantes() : {}
{
    <IDENTIFIER> {acoesSemanticas.acao11(getToken(0).image);} listaDeIdentificadoresDeConstantes1()
}

void listaDeIdentificadoresDeConstantes1() : {}
{
    [<SS_COMMA> listaDeIdentificadoresDeConstantes()]
}

void listaDeIdentificadoresDeVariaveis() : {}
{
    <IDENTIFIER>{acoesSemanticas.acao12(getToken(0).image);} indice() {acoesSemanticas.acao13();} listaDeIdentificadoresDeVariaveis1()
}

void listaDeIdentificadoresDeVariaveis1() : {}
{
    [<SS_COMMA> listaDeIdentificadoresDeVariaveis()]
}

void indice() : {}
{
    [<SS_SQUACEBRACE_OPEN> <INTEGER_CONSTANT> {acoesSemanticas.acao14(Integer.parseInt(getToken(0).image));}<SS_SQUAREBRACE_CLOSE>]
}

void valor() : {}
{
    <INTEGER_CONSTANT> | <FLOAT_CONSTANT> | <LITERAL_CONSTANT>
}

void corpoDoPrograma() : {}
{
    <R_EXECUTE> <SS_CURLYBRACE_OPEN> listaDeComandos() <SS_CURLYBRACE_CLOSE>
}

void listaDeComandos() : {}
{
    comando() <SS_DOT> listaDeComandos1()
}

void listaDeComandos1() : {}
{
    [listaDeComandos()]
}

void comando() : {}
{
    atribuicao() | entrada() | saida() | selecao() | repeticao()
}

void atribuicao() : {}
{
    <R_SET> {acoesSemanticas.acao15();} expressao() <R_TO> listaDeIdentificadoresDeVariaveis() {acoesSemanticas.acao16();}
}

void entrada() : {}
{
    <R_GET> {acoesSemanticas.acao17();} <SS_CURLYBRACE_OPEN> listaDeIdentificadoresDeVariaveis() <SS_CURLYBRACE_CLOSE>
}

void saida() : {}
{
    <R_PUT> <SS_CURLYBRACE_OPEN> listaDeIdentificadoresEOuConstantes() <SS_CURLYBRACE_CLOSE>
}

void listaDeIdentificadoresEOuConstantes() : {}
{
    item() {acoesSemanticas.acao18();} listaDeIdentificadoresEOuConstantes1()
}

void listaDeIdentificadoresEOuConstantes1() : {}
{
    [<SS_COMMA> listaDeIdentificadoresEOuConstantes()]
}

void item() : {}
{
    <IDENTIFIER> {acoesSemanticas.acao19(getToken(0).image);} indice() {acoesSemanticas.acao20();}
    | <INTEGER_CONSTANT> {acoesSemanticas.acao21(Integer.parseInt(getToken(0).image));}
    | <FLOAT_CONSTANT> {acoesSemanticas.acao22(Float.parseFloat(getToken(0).image));}
    | <LITERAL_CONSTANT> {acoesSemanticas.acao23(getToken(0).image);}
}

void selecao() : {}
{
    <R_VERIFY> expressao() <R_IS> clausulas() {acoesSemanticas.acao24();}
}

void clausulas() : {}
{
    <R_TRUE> {acoesSemanticas.acao25();} <SS_CURLYBRACE_OPEN> listaDeComandos() <SS_CURLYBRACE_CLOSE> falsa() |
    <R_FALSE> {acoesSemanticas.acao26();} <SS_CURLYBRACE_OPEN> listaDeComandos() <SS_CURLYBRACE_CLOSE> verdadeira()
}

void verdadeira() : {}
{
    [<R_IS> <R_TRUE> {acoesSemanticas.acao27();} <SS_CURLYBRACE_OPEN> listaDeComandos() <SS_CURLYBRACE_CLOSE>]
}

void falsa() : {}
{
    [<R_IS> <R_FALSE> {acoesSemanticas.acao27();} <SS_CURLYBRACE_OPEN> listaDeComandos() <SS_CURLYBRACE_CLOSE>]
}

void repeticao() : {}
{
    <R_LOOP> {acoesSemanticas.acao28();} <SS_CURLYBRACE_OPEN> listaDeComandos() <SS_CURLYBRACE_CLOSE> <R_WHILE> expressao() {acoesSemanticas.acao29();} <R_IS> <R_TRUE> |
    <R_WHILE> {acoesSemanticas.acao30();} expressao() {acoesSemanticas.acao31();} <R_IS> <R_TRUE> <R_DO> <SS_CURLYBRACE_OPEN> listaDeComandos() <SS_CURLYBRACE_CLOSE> {acoesSemanticas.acao32();}
}

void expressao() : {}
{
    expressaoAritmeticaOuLogica() expressao1()
}

void expressao1() : {}
{
    [<SS_EQUALS> expressaoAritmeticaOuLogica() {acoesSemanticas.acao33();} |
    <SS_NOT_EQUALS> expressaoAritmeticaOuLogica() {acoesSemanticas.acao34();}|
    <SS_LESS_THAN> expressaoAritmeticaOuLogica() {acoesSemanticas.acao35();}|
    <SS_MORE_THAN> expressaoAritmeticaOuLogica() {acoesSemanticas.acao36();}|
    <SS_LESS_OR_EQUAL_THAN> expressaoAritmeticaOuLogica() {acoesSemanticas.acao37();}|
    <SS_MORE_OR_EQUAL_THAN> expressaoAritmeticaOuLogica(){acoesSemanticas.acao38();}]
}

void expressaoAritmeticaOuLogica() : {}
{
    termo2() menorPrioridade()
}

void menorPrioridade() : {}
{
    [<SS_PLUS> termo2() menorPrioridade() {acoesSemanticas.acao39();} |
    <SS_MINUS> termo2() menorPrioridade() {acoesSemanticas.acao40();}|
    <SS_OR> termo2() menorPrioridade(){acoesSemanticas.acao41();}]
}

void termo2() : {}
{
    termo1() mediaPrioridade()
}

void mediaPrioridade() : {}
{
    [<SS_TIMES> termo1() mediaPrioridade() {acoesSemanticas.acao42();}|
    <SS_DIVIDE> termo1() mediaPrioridade() {acoesSemanticas.acao43();}|
    <SS_PERCENT> termo1() mediaPrioridade() {acoesSemanticas.acao44();}|
    <SS_MODULO> termo1() mediaPrioridade() {acoesSemanticas.acao45();}|
    <SS_AND> termo1() mediaPrioridade() {acoesSemanticas.acao46();}]
}

void termo1() : {}
{
    elemento() maiorPrioridade() {acoesSemanticas.acao47();}
}

void maiorPrioridade() : {}
{
    [<SS_EXPODENTIAL> elemento() maiorPrioridade()]
}

void elemento() : {}
{
    <IDENTIFIER> {acoesSemanticas.acao19(getToken(0).image);} indice() {acoesSemanticas.acao20();} |
    <INTEGER_CONSTANT> {acoesSemanticas.acao21(Integer.parseInt(getToken(0).image));}|
    <FLOAT_CONSTANT> {acoesSemanticas.acao22(Float.parseFloat(getToken(0).image));}|
    <LITERAL_CONSTANT> {acoesSemanticas.acao23(getToken(0).image);}|
    <R_TRUE> {acoesSemanticas.acao48();}|
    <R_FALSE> {acoesSemanticas.acao49();}|
    <SS_PARENTESES_OPEN> expressao() <SS_PARENTESES_CLOSE> |
    <SS_NOT> <SS_PARENTESES_OPEN> expressao() <SS_PARENTESES_CLOSE> {acoesSemanticas.acao50();}
}

