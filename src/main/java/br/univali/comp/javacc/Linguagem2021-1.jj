options {
    STATIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(Sintatico)
package br.univali.comp.javacc.gen;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import br.univali.comp.recovery.*;

public class Sintatico {

}
PARSER_END(Sintatico)

TOKEN_MGR_DECLS : {}

//Skip the following elements
SKIP : {
    <SPACE : " "> |
    <EOL: ("\n" | "\r" | "\n\r")> |
    <SKIP_MARKERS: "\t" | "\r" | "\r\n" | <SPACE> | <EOL>>
}

SKIP : {
    ":*" : COMMENT                     |
    <COMMENT_LINE: ":|" (~["\n", "\r"])* <EOL> >
 }
<COMMENT> SKIP : {
    "*:" : DEFAULT
}
<COMMENT> MORE : {
    <~[]>
}

TOKEN : {
    <INTEGER_CONSTANT: ["0"-"9"] (["0"-"9"])? (["0"-"9"])? >
}
TOKEN : {
    <FLOAT_CONSTANT: ["0"-"9"] (["0"-"9"])? (["0"-"9"])? (["0"-"9"])? (["0"-"9"])? "." ["0"-"9"] (["0"-"9"])? >
}

TOKEN : {
    <LITERAL_CONSTANT: ("\"" (~["\""])* "\"") | ("'" (~["'"])* "'") >
}

TOKEN [IGNORE_CASE]: {
     <R_PROGRAM: "program">
  |  <R_DEFINE: "define">
  |  <R_NOT: "not">
  |  <R_VARIABLE: "variable">
  |  <R_IS: "is">
  |  <R_VERIFY: "verify">
  |  <R_EXECUTE: "execute">
  |  <R_SET: "set">
  |  <R_TO: "to">
  |  <R_GET: "get">
  |  <R_PUT: "put">
  |  <R_LOOP: "loop">
  |  <R_WHILE: "while">
  |  <R_TRUE: "true">
  |  <R_FALSE: "false">
  |  <R_DO: "do">
  |  <R_NATURAL: "natural">
  |  <R_REAL: "real">
  |  <R_CHAR: "char">
  |  <R_BOOLEAN: "boolean">
}
TOKEN : {
    <IDENTIFIER: ( ( ( (["a" - "z", "A" - "Z"] ("_")?) | ("_" (["a" - "z", "A" - "Z"])?) ) ["0"-"9"] ) | ("_" ["a" - "z", "A" - "Z"]) | (["a" - "z", "A" - "Z"]) )* ( ("_") | (["a" - "z", "A" - "Z"]) | (["a" - "z", "A" - "Z"] "_") | ("_" ["a" - "z", "A" - "Z"]) )>
}

//Special symbols
TOKEN : {
    // Pontuação
  <SS_DOT: ".">
  | <SS_COMMA: ",">
  | <SS_CURLYBRACE_OPEN: "{">
  | <SS_CURLYBRACE_CLOSE: "}">
  | <SS_SQUACEBRACE_OPEN: "[">
  | <SS_SQUAREBRACE_CLOSE: "]">
  | <SS_PARENTESES_OPEN: "(">
  | <SS_PARENTESES_CLOSE: ")">
  | <SS_HEADER:  ":-" >
    // Simbolos aritiméticos
  | <SS_PLUS: "+">
  | <SS_MINUS: "-">
  | <SS_TIMES: "*">
  | <SS_DIVIDE: "/">
  | <SS_PERCENT: "%">
  | <SS_EXPODENTIAL: "**">
  | <SS_MODULO: "%%">
  // Simbolos lógicos
  | <SS_LESS_THAN: "<">
  | <SS_MORE_THAN: ">">
  | <SS_AND: "&">
  | <SS_OR: "|">
  | <SS_NOT: "!">
  | <SS_EQUALS: "==">
  | <SS_NOT_EQUALS: "!=">
  | <SS_LESS_OR_EQUAL_THAN: "<=">
  | <SS_MORE_OR_EQUAL_THAN: ">=">
}

TOKEN : {
    <ERROR_INVALID_SYMBOL: ["\u0000" - "\u00ff"] >
    |   <ERROR_UNFINISHED_LITERAL_CONSTANT: ("\"" (~["\""])*) | "'" (~["'"])* >
    |   <ERROR_INTEGER_CONSTANT_FORMAT: ["0"-"9"] ["0"-"9"] ["0"-"9"] (["0"-"9"])+ >
    |   <ERROR_FLOAT_CONSTANT_FORMAT: (["0"-"9"] ["0"-"9"] ["0"-"9"] ["0"-"9"] ["0"-"9"] (["0"-"9"])+ "." (["0"-"9"])*) | ((["0"-"9"])+ "." ["0"-"9"] ["0"-"9"] (["0"-"9"])+) >
}

void program() throws ParseEOFException :
{
 RecoverySet g = First.program;
}
{
try{
    linguagem2021_1(g) <EOF>
}catch (ParseException e){
    consumeUntil(g, e, "Missing incorrect XXXX", "program");
}
}
void linguagem2021_1(RecoverySet g) throws ParseEOFException: {}
{
    header(g) <R_PROGRAM> <SS_CURLYBRACE_OPEN> define(g) execute(g) <SS_CURLYBRACE_CLOSE> ident_final(g)
}
void header(RecoverySet g) throws ParseEOFException: {
    RecoverySet f = First.header.union(g);
}
{
    try {
        [ <SS_HEADER> <LITERAL_CONSTANT> ]
    } catch(ParseException e) {
        consumeUntil(f, e, "Invalid header expression, missing literal constant before program", "program");
    }
}
void ident_final(RecoverySet g) : {}
{
    [ <IDENTIFIER> ]
}
void todos_os_comandos(RecoverySet g) throws ParseEOFException : {}
{
        loops_repeticao(g)
    |   verify(g)
    |   get(g)
    |   set(g)
    |   put(g)
}
void lista_de_comandos(RecoverySet g) throws ParseEOFException : {}
{
    todos_os_comandos(g) <SS_DOT> lista_de_comandos_opt(g)
}
void lista_de_comandos_opt(RecoverySet g) throws ParseEOFException : {}
{
    (todos_os_comandos(g) <SS_DOT>)*
}
void lista_de_identificadores(RecoverySet g) throws ParseEOFException : {}
{
    <IDENTIFIER> lista_opt_de_identificadores(g)
}
void lista_opt_de_identificadores(RecoverySet g) throws ParseEOFException : {}
{
    [ <SS_COMMA> lista_de_identificadores(g) ]
}
// BEGIN define
void define(RecoverySet g) throws ParseEOFException : {
    RecoverySet f = First.define.union(g);
 }
{
    try {
        [ <R_DEFINE> <SS_CURLYBRACE_OPEN> def_const_e_ou_var(g) <SS_CURLYBRACE_CLOSE> ]
    } catch(ParseException e) {
        consumeUntil(f, e, "Missing or incorrect define expression:", "execute");
    }
}
void def_const_e_ou_var(RecoverySet g) throws ParseEOFException : {}
{
    define_const_var_opt(g) | define_var_opt_const(g)
}
void define_const_var_opt(RecoverySet g) throws ParseEOFException: {}
{
    <R_NOT> <R_VARIABLE> lista_de_atribuicao_com_valor(g) define_var_opt(g)
}
void define_var_opt(RecoverySet g) throws ParseEOFException : {}
{
    [<R_VARIABLE> lista_de_atribuicao_sem_valor(g)]
}
void lista_de_atribuicao_com_valor(RecoverySet g) throws ParseEOFException : {}
{
    tipo(g) <R_IS> lista_de_identificadores(g) constante(g) <SS_DOT> [ lista_de_atribuicao_com_valor(g) ]
}

void lista_de_atribuicao_sem_valor(RecoverySet g) throws ParseEOFException: {}
{
    tipo(g) <R_IS> lista_de_identificadores(g) <SS_DOT> [ lista_de_atribuicao_sem_valor(g) ]
}
void define_var_opt_const(RecoverySet g) throws ParseEOFException : {}
{
    <R_VARIABLE> lista_de_atribuicao_sem_valor(g) define_const_opt(g)
}
void define_const_opt(RecoverySet g) throws ParseEOFException : {}
{
    [<R_NOT> <R_VARIABLE> lista_de_atribuicao_com_valor(g) define_var_opt(g)]
}
void tipo(RecoverySet g) throws ParseEOFException : {
    RecoverySet f = First.tipo.union(g);
}
{
  try {
    <R_NATURAL> | <R_REAL> |  <R_CHAR> | <R_BOOLEAN>
  } catch(ParseException e) {
    consumeUntil(f, e, "Invalid data type, must be one of: natural, real, char or boolean", "is");
  }
}
// BEGIN loops
void loops_repeticao(RecoverySet g) throws ParseEOFException : {}
{
    while_expr(g) | do_loop(g)
}
void while_expr(RecoverySet g) throws ParseEOFException : {}
{
    <R_WHILE> expressao(g) <R_IS> <R_TRUE> <R_DO> <SS_CURLYBRACE_OPEN> lista_de_comandos(g) <SS_CURLYBRACE_CLOSE>
}
void do_loop(RecoverySet g) throws ParseEOFException : {}
{
    <R_LOOP> <SS_CURLYBRACE_OPEN> lista_de_comandos(g) <SS_CURLYBRACE_CLOSE> <R_WHILE> expressao(g) <R_IS> <R_TRUE>
}
// BEGIN execute
void execute(RecoverySet g) throws ParseEOFException : {
    RecoverySet f = First.execute.union(g);
}
{
    try {
        <R_EXECUTE> <SS_CURLYBRACE_OPEN> lista_de_comandos(g) <SS_CURLYBRACE_CLOSE>
    } catch (ParseException e) {
        consumeUntil(g, e, "Missing or invalid execute expression", "}");
    }
}
// BEGIN get
void get(RecoverySet g) throws ParseEOFException : {
    RecoverySet f = First.todos_os_comandos.union(g);
 }
{
    try {
        <R_GET>  <SS_CURLYBRACE_OPEN> lista_de_identificadores(g) <SS_CURLYBRACE_CLOSE>
    } catch(ParseException e) {
        consumeUntil(f, e, "Missing or invalid get expression", "<SS_DOT>");
    }
}
// BEGIN set
void set(RecoverySet g) throws ParseEOFException : {
     RecoverySet f = First.todos_os_comandos.union(g);
 }
{
    try {
        <R_SET> expressao(g) <R_TO> lista_de_identificadores(g)
    } catch(ParseException e) {
        consumeUntil(f, e, "Missing or invalid set expression", "<SS_DOT>");
    }
}
// BEGIN put
void put(RecoverySet g) throws ParseEOFException : {
    RecoverySet f = First.todos_os_comandos.union(g);
}
{
    try {
        <R_PUT> <SS_CURLYBRACE_OPEN> lista_de_identificadores_e_ou_constantes(g) <SS_CURLYBRACE_CLOSE>
    } catch(ParseException e) {
        consumeUntil(f, e, "Missing or invalid put expression", "<SS_DOT>");
    }
}
void identificador_ou_constante(RecoverySet g) : {}
{
    <IDENTIFIER> | constante(g)
}
void lista_de_identificadores_e_ou_constantes(RecoverySet g) : {}
{
    identificador_ou_constante(g) [ <SS_COMMA> lista_de_identificadores_e_ou_constantes(g) ]
}
void constante(RecoverySet g) : {}
{
    <FLOAT_CONSTANT> | <INTEGER_CONSTANT> | <LITERAL_CONSTANT>
}
// BEGIN verify
void verify(RecoverySet g) throws ParseEOFException : {
    RecoverySet f = First.todos_os_comandos.union(g);
 }
{
    try {
        <R_VERIFY> expressao(g) <R_IS> verify_truefalse(g)
    } catch (ParseException e) {
        consumeUntil(f, e, "Missing or invalid verify expression", "<SS_DOT>");
    }

}
void verify_truefalse(RecoverySet g) throws ParseEOFException : {}
{
    verify_true(g) | verify_false(g)
}
void verify_true(RecoverySet g) throws ParseEOFException : {}
{
    <R_TRUE> <SS_CURLYBRACE_OPEN> lista_de_comandos(g) <SS_CURLYBRACE_CLOSE> verify_opt_false(g)
}
void verify_opt_false(RecoverySet g) throws ParseEOFException : {}
{
  [
    <R_IS> <R_FALSE> <SS_CURLYBRACE_OPEN> lista_de_comandos(g) <SS_CURLYBRACE_CLOSE>
  ]
}
void verify_false(RecoverySet g) throws ParseEOFException : {}
{
    <R_FALSE> <SS_CURLYBRACE_OPEN> lista_de_comandos(g) <SS_CURLYBRACE_CLOSE> verify_opt_true(g)
}
void verify_opt_true(RecoverySet g) throws ParseEOFException : {}
{
  [
    <R_IS> <R_TRUE> <SS_CURLYBRACE_OPEN> lista_de_comandos(g) <SS_CURLYBRACE_CLOSE>
  ]
}
// BEGIN espressao
void expressao(RecoverySet g) throws ParseEOFException : {
    RecoverySet f = First.expressao.union(g);
}
{
    try {
            expressao_aritmetica_ou_logica(g) expressao_dash(g)
        } catch(ParseException e) {
            consumeUntil(f, e, "Invalid arithmetic or logic expression", "is/to");
        }
}
void expressao_dash(RecoverySet g) throws ParseEOFException : {}
{
    [
          <SS_EQUALS>     expressao_aritmetica_ou_logica(g)
        | <SS_NOT_EQUALS> expressao_aritmetica_ou_logica(g)
        | <SS_LESS_THAN>  expressao_aritmetica_ou_logica(g)
        | <SS_MORE_THAN>  expressao_aritmetica_ou_logica(g)
        | <SS_LESS_OR_EQUAL_THAN> expressao_aritmetica_ou_logica(g)
        | <SS_MORE_OR_EQUAL_THAN> expressao_aritmetica_ou_logica(g)
    ]
}
void expressao_aritmetica_ou_logica(RecoverySet g) throws ParseEOFException : {}
{
    termo2(g) menor_prioridade(g)
}
void menor_prioridade(RecoverySet g) throws ParseEOFException : {}
{
    [
         <SS_PLUS> termo2(g) menor_prioridade(g)
       | <SS_MINUS> termo2(g) menor_prioridade(g)
       | <SS_OR> termo2(g) menor_prioridade(g)
    ]
}
void termo2(RecoverySet g) throws ParseEOFException : {}
{
    termo1(g) media_prioridade(g)
}
void media_prioridade(RecoverySet g) throws ParseEOFException : {}
{
    [
        <SS_TIMES>   termo1(g) media_prioridade(g)
      | <SS_DIVIDE>  termo1(g) media_prioridade(g)
      | <SS_PERCENT> termo1(g) media_prioridade(g)
      | <SS_MODULO>  termo1(g) media_prioridade(g)
      | <SS_AND>     termo1(g) media_prioridade(g)
    ]
}
void termo1(RecoverySet g) throws ParseEOFException : {}
{
    elemento(g) maior_prioridade(g)
}
void maior_prioridade(RecoverySet g) throws ParseEOFException : {}
{
    [
        <SS_EXPODENTIAL> elemento(g) maior_prioridade(g)
    ]
}
void elemento(RecoverySet g) throws ParseEOFException : {}
{
        <IDENTIFIER> indice(g)
     |  <INTEGER_CONSTANT>
     |  <FLOAT_CONSTANT>
     |  <LITERAL_CONSTANT>
     |  <R_TRUE>
     |  <R_FALSE>
     |  <SS_PARENTESES_OPEN> expressao(g) <SS_PARENTESES_CLOSE>
     |  <SS_NOT> <SS_PARENTESES_OPEN> expressao(g) <SS_PARENTESES_CLOSE>
}
void indice(RecoverySet g) throws ParseEOFException : {}
{
    [ <SS_SQUACEBRACE_OPEN> <INTEGER_CONSTANT> <SS_PARENTESES_CLOSE> ]
}