/*
Ciaran McNally

ImpCA Language, Lexical Analyser

Parses Tokens of the format <TOKEN>
*/

options{
	JAVA_UNICODE_ESCAPE = true;
    IGNORE_CASE = true;
    STATIC = true;
}

PARSER_BEGIN(ImpCA_Lex)

public class ImpCA_Lex{
	public static void main(String args[]){
        ImpCA_Lex Tokeniser;
        if(args.length == 0){
			System.out.println("Reading from standard input!");
			Tokeniser = new ImpCA_Lex(System.in);
		}
		else if(args.length == 1){
			try{
                Tokeniser = new ImpCA_Lex(new java.io.FileInputStream(args[0]));
			}
			catch(java.io.FileNotFoundException e){
				System.err.println(args[0] + " was not found." );
				System.err.println(e);
				return;
			}
		}
		else{
			System.out.println("Use:\njava ImpCA_Lex < inputFile");
			System.out.println("or java ImpCA_Lex inputFile");
			return;
		}

        //Printing the tokens
		for(Token t = getNextToken(); t.kind != EOF; t = getNextToken()){
            switch(t.kind){
                case ID:{
                    System.out.print("<ID("+t.image+")> ");
                    break;
                }
                 case AND:{
                    System.out.print("<AND> ");
                    break;
                }
                 case BEGIN:{
                    System.out.print("<BEGIN> ");
                    break;
                }
                 case BOOLEAN:{
                    System.out.print("<BOOLEAN> ");
                    break;
                }
                 case CONST:{
                    System.out.print("<CONST> ");
                    break;
                }
                 case DO:{
                    System.out.print("<DO> ");
                    break;
                }
                 case ELSE:{
                    System.out.print("<ELSE> ");
                    break;
                }
                case END:{
                    System.out.print("<END> ");
                    break;
                }
                case IF:{
                    System.out.print("<IF> ");
                    break;
                }
                case INTEGER:{
                    System.out.print("<INTEGER> ");
                    break;
                }
                case MAIN:{
                    System.out.print("<MAIN> ");
                    break;
                }
                case NOT:{
                    System.out.print("<NOT> ");
                    break;
                }
                case OR:{
                    System.out.print("<OR> ");
                    break;
                }
                case PROGRAM:{
                    System.out.print("<PROGRAM> ");
                    break;
                }
                case REAL:{
                    System.out.print("<REAL> ");
                    break;
                }
                case RETURN:{
                    System.out.print("<RETURN> ");
                    break;
                }
                case THEN:{
                    System.out.print("<THEN> ");
                    break;
                }
                case VAR:{
                    System.out.print("<VAR> ");
                    break;
                }
                case VOID:{
                    System.out.print("<VOID> ");
                    break;
                }
                case WHILE:{
                    System.out.print("<WHILE> ");
                    break;
                }
                case ADD:{
                    System.out.print("<ADD> ");
                    break;
                }
                case SUB:{
                    System.out.print("<SUB> ");
                    break;
                }
                case MUL:{
                    System.out.print("<MUL> ");
                    break;
                }
                case DIV:{
                    System.out.print("<DIV> ");
                    break;
                }
                case MOD:{
                    System.out.print("<MOD> ");
                    break;
                }
                case EQ:{
                    System.out.print("<EQ> ");
                    break;
                }
                case NOTEQ:{
                    System.out.print("<NOTEQ> ");
                    break;
                }
                case GT:{
                    System.out.print("<GT> ");
                    break;
                }
                case LT:{
                    System.out.print("<LT> ");
                    break;
                }
                case LE:{
                    System.out.print("<LE> ");
                    break;
                }
                case GE:{
                    System.out.print("<GE> ");
                    break;
                }
                case LBR:{
                    System.out.print("<LBR> ");
                    break;
                }
                case RBR:{
                    System.out.print("<RBR> ");
                    break;
                }
                case COMMA:{
                    System.out.print("<COMMA> ");
                    break;
                }
                case SEMIC:{
                    System.out.print("<SEMIC> ");
                    break;
                }
                case COLON:{
                    System.out.print("<COLON> ");
                    break;
                }
                case DOT:{
                    System.out.print("<DOT> ");
                    break;
                }
                case ASSIGN:{
                    System.out.print("<ASSIGN> ");
                    break;
                }
                case QUES:{
                    System.out.print("<QUES> ");
                    break;
                }
                case EXCLAM:{
                    System.out.print("<EXCLAM> ");
                    break;
                }
                case US:{
                    System.out.print("<US> ");
                    break;
                }
                case BOOL:{
                    System.out.print("<BOOL("+t.image+ ")> ");
                    break;
                }
                case INT:{
                    System.out.print("<INT("+t.image+")> ");
                    break;
                }
                case REALNO:{
                    System.out.print("<REALNO("+t.image+")> ");
                    break;
                }
                case STRING:{
                    System.out.print("<STRING("+t.image+")> ");
                    break;
                }
                //Shouldn't ever be printed.
                default:{
                    System.out.print("<DEFAULT UNFOUND: Image:"+t.image+ " | Kind:" +t.kind +">");
                    break;
                }
            }
        }
        //Printing End of File Token after All tokens have expired
        System.out.print("<EOF>");
	}
}
PARSER_END(ImpCA_Lex)

//Token Manager Declarations
TOKEN_MGR_DECLS :
{
	static int commentLevel = 0 ;
}
<COMMENT> SKIP :{
	"/-"	{	commentLevel++;		}
|	"-/"	{	commentLevel--;
			    if(commentLevel == 0){  SwitchTo(DEFAULT); }
		    }
| 	< ~[] >
}

//Skip the following elements
SKIP : {
    <SPACE : " ">
|   "\t" | "\n" | "\r" | "\r\n"
|	"/-" { commentLevel++; } : COMMENT
}


//Reserved words first
/*
    I am Assuming the ImpCA Language uses keywords 'and' and 'or' to represent
    the boolean equivalent operations.
    There were no examples of these operations in the given .imp files.
    I would have otherwise used similar syntax to java and used '&&'
    or '||' which simply would involve replacing the keywords with these symbols.
*/
TOKEN : {
	<AND : "AND"> | <BEGIN : "BEGIN"> | <BOOLEAN : "BOOLEAN">
|   <CONST : "CONST"> | <DO : "DO"> | <ELSE : "ELSE"> | <END : "END">
|	<#FALSE : "FALSE"> | <IF : "IF"> | <INTEGER : "INTEGER">
|   <MAIN: "MAIN"> | <NOT : "NOT"> | <OR : "OR"> | <PROGRAM : "PROGRAM">
|	<REAL : "REAL"> | <RETURN : "RETURN"> | <THEN : "THEN">
|   <#TRUE : "TRUE"> | <VAR : "VAR"> | <VOID : "VOID">| <WHILE : "WHILE">
}

//Symbols, puncutation and other Keyboard symbols
/*
The tokens towards the end containing # are only included in
the String token definition, otherwise they are not used and
should throw a parse error outside of a string definition.
*/
TOKEN : {
    <ADD : "+"> | <SUB : "-"> | <MUL : "*"> | <DIV : "/">
|   <MOD: "%"> | <EQ : "="> | <NOTEQ : "!="> | <GT : ">">
|   <LT : "<"> | <LE : "<="> | <GE : ">="> | <LBR : "(">
|   <RBR : ")"> | <COMMA : ","> | <SEMIC : ";"> | <COLON : ":">
|   <DOT : "."> | <ASSIGN : ":="> | <QUES : "?"> | <EXCLAM : "!">
|   <#QUOTE : "\""> | <#BSL : "\\"> | <#US : "_">
|   <#TILDA : "~"> | <#ACCENT : "`"> | <#AT : "@"> | <#HASH : "#">
|   <#DLLR : "$"> | <#CARET : "^"> | <#AMP : "&"> | <#PIPE : "|">
|   <#CBL : "{"> | <#CBR : "}"> | <#SQBL : "["> | <#SQBR : "]">
|   <#APOST : "'"> | <#POUND : "£"> | <#EURO : "€">
}

//Real Numbers, Boolean and Integers
/*
Also needs to account for negative values
*/
TOKEN: {
    <BOOL : <TRUE> | <FALSE>>
|   <#DIGIT : ["0"-"9"]>
|   <INT : (<SUB>)? ["1"-"9"] (<DIGIT>)* | "0">
|   <#R1 : ((<SUB>)? (<DIGIT>)+ <DOT> (<DIGIT>)*)>
|   <#R2 : ((<SUB>)? (<DIGIT>)* <DOT> (<DIGIT>)+)>
|   <REALNO : <R1> | <R2>>
}

//Strings beginning and ending with quotes
/*
Strings include digits, chars, punctuation, escaped punctuation and
The additional keyboard symbols. Valid as long as String is within
Double Quotes.
*/
TOKEN : {
	<#CHAR : ["a"-"z","A"-"Z"]>
|	<STRING : (<QUOTE> (<DIGIT> | <CHAR> | <ADD> | <SUB> | <MUL> | <DIV> | <MOD>
|                       <EQ> | <NOTEQ> | <GT> | <LT> | <LE> | <GE> | <LBR> | <RBR>
|                       <COMMA> | <SEMIC> | <COLON> | <DOT> | <QUES> | <EXCLAM>
|                       <US> | <TILDA> | <ACCENT> | <AT> | <HASH> | <DLLR> | <CARET>
|                       <AMP> | <PIPE> | <CBL> | <CBR> | <SQBL> | <SQBR> | <APOST>
|                       <POUND> | <EURO> | <SPACE>
|                       (<BSL><QUOTE>) //Escaped quote \"
|                       (<BSL><BSL>)   //Escaped Backslash \\
|                       (<BSL><BSL>"N")//Escaped newline \\n
                        )* <QUOTE>)>
}

TOKEN : // Identifiers
/*
Must start with a character and after that ID can contain
any combination of characters, digits and underscores
*/
{
	<#X : <CHAR>|<DIGIT>|<US>>
|	<ID : <CHAR>(<X>)*>
}