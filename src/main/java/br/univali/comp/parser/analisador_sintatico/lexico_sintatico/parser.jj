options {
    STATIC = false;
    UNICODE_INPUT = true;
    DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(Lexico)
package br.univali.comp.parser.analisador_sintatico.lexico_sintatico;


public class Lexico {
    private StringBuilder tokens = new StringBuilder();
    private Boolean hasLexicalErrors = false;

    public void handleToken()  {
            try {
                Token t = null;
                t = getNextToken();
                if(t.kind == EOF) return;
                switch(t.kind){
                    case INTEGER_CONSTANT:{
                        tokens.append("Token: '"+t.image+"' - Type: INTEGER_CONSTANT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case FLOAT_CONSTANT:{
                        tokens.append("Token: '"+t.image+"' - Type: FLOAT_CONSTANT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case LITERAL_CONSTANT:{
                        tokens.append("Token: '"+t.image+"' - Type: LITERAL_CONSTANT-"+t.kind+" - Line-Column-begin: "+t.beginLine+"-"+t.beginColumn+ " ; Line-Column-end: "+t.endLine+"-"+t.endColumn+"\n");
                        break;
                    }
                    // Removido de acordo com correção prof.
//                    case ARITHMETIC:{
//                        tokens.append("Token: '"+t.image+"' - Type: ARITHMETIC-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
//                        break;
//                    }
                    case IDENTIFIER:{
                        tokens.append("Token: '"+t.image+"' - Type: IDENTIFIER-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    // Removido de acordo com correção prof.
//                    case LOGICAL:{
//                        tokens.append("Token: '"+t.image+"' - Type: LOGICAL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
//                        break;
//                    }
                    case SPECIAL_SYMBOL:{
                        tokens.append("Token: '"+t.image+"' - Type: SPECIAL_SYMBOL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case RESERVED_WORDS:{
                        tokens.append("Token: '"+t.image+"' - Type: RESERVED_WORDS-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
//                    TO generic errors
//                    case ERROR:{
//                        tokens.append("ERROR: '"+t.image+"' - Type: Invalid Token-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
//                        break;
//                    }
                    case ERROR_INVALID_SYMBOL:{
                        tokens.append("ERROR: '"+t.image+"' - Type: ERROR_INVALID_SYMBOL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        hasLexicalErrors = true;
                        break;
                    }
                    case ERROR_UNFINISHED_LITERAL_CONSTANT:{
                        tokens.append("ERROR_UNFINISHED_LITERAL_CONSTANT: \n'"+t.image+"' \n Type: ERROR_UNFINISHED_LITERAL_CONSTANT-"+t.kind+" - Line-Column-begin: "+t.beginLine+"-"+t.beginColumn+ " ; Line-Column-end: "+t.endLine+"-"+t.endColumn+"\n");
                        hasLexicalErrors = true;
                        break;
                    }
                    case ERROR_INTEGER_CONSTANT_FORMAT:{
                        tokens.append("ERROR: '"+t.image+"' - Type: ERROR_INTEGER_CONSTANT_FORMAT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        hasLexicalErrors = true;
                        break;
                    }
                    case ERROR_FLOAT_CONSTANT_FORMAT:{
                        tokens.append("ERROR: '"+t.image+"' - Type: ERROR_FLOAT_CONSTANT_FORMAT-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        hasLexicalErrors = true;
                        break;
                    }
                    default:{
                        tokens.append("<DEFAULT UNFOUND: Image:"+t.image+ " | Kind:" +t.kind +">"+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        hasLexicalErrors = true;
                        break;
                    }
                }
                handleToken();
            }catch(Error error){
                hasLexicalErrors = true;
                tokens.append("Error - " + error.getMessage() + "\n");
                System.out.println(error.toString());
                handleToken();
            }
        }

    private Lexico readInput(String args[], String textToAnalyze) {
        Lexico lexico = null;
        if(args.length == 0){
            System.out.println("Reading from received text!");
            java.io.InputStream targetStream = new java.io.ByteArrayInputStream(textToAnalyze.getBytes());
            lexico = new Lexico(targetStream);
        }
        else if(args.length == 1){
            try{
                lexico = new Lexico(new java.io.FileInputStream(args[0]));
            }
            catch(java.io.FileNotFoundException e){
                System.err.println(args[0] + " was not found." );
                System.err.println(e);
            }
        }
        else{
            System.out.println("Use:\njava Lexico < inputFile");
            System.out.println("or java Lexico inputFile");
        }
        return lexico;
    }

    public String analyze(String args[], String textToAnalyze) throws ParseException  {
            Lexico lexico = this.readInput(args, textToAnalyze);

            this.handleToken();
            tokens.append("<EOF>");

            if(!hasLexicalErrors){
                lexico.program();
            }

            //return tokens.toString();
            return "Sintaticamente correto!";
        }


    public static void main(String args[])  throws ParseException {
        Lexico parser = new Lexico( System.in ) ;
        parser.analyze(args, "");
        System.out.println("tokens: " + parser.tokens);
    }

    public String getResults(){
            return tokens.toString();
    }

}
PARSER_END(Lexico)

TOKEN_MGR_DECLS :
{
	static int commentLevel = 0 ;
}




//Skip the following elements
SKIP : {
    <SPACE : " "> |
    <EOL: ("\n" | "\r" | "\n\r")> |
    <SKIP_MARKERS: "\t" | "\r" | "\r\n" | <SPACE> | <EOL>>
}

SKIP : {
    <#LINE: (~["\n", "\r"])* <EOL> | (~["\n", "\r"])*> |
    ":*" : COMMENT                     |
    <COMMENT_LINE: ":|" <LINE> >
 }
<COMMENT> SKIP : {
    "*:" : DEFAULT
}
<COMMENT> MORE : {
    <~[]>
}

TOKEN : {
    <INTEGER_CONSTANT: ["0"-"9"] (["0"-"9"])? (["0"-"9"])? >
}
TOKEN : {
    <FLOAT_CONSTANT: ["0"-"9"] (["0"-"9"])? (["0"-"9"])? (["0"-"9"])? (["0"-"9"])? "." ["0"-"9"] (["0"-"9"])? >
}

TOKEN : {
    <LITERAL_CONSTANT: ("\"" (~["\""])* "\"") | ("'" (~["'"])* "'") >
}

// Removido de acordo com correção prof.
//TOKEN: {
//    <ARITHMETIC: ["+", "-", "*", "/", "%"] | "**" | "%%" >
//}
TOKEN [IGNORE_CASE]: {
    <RESERVED_WORDS: "program" | "define" | "not" | "variable" | "is" |
    "execute" | "set" | "to" | "get" | "put" | "loop" | "while" | "true" |
    "false" | "do" | "natural" | "real" | "char" | "boolean" | "if" | "else">
}
TOKEN : {
    <IDENTIFIER: ( ( ( (["a" - "z", "A" - "Z"] ("_")?) | ("_" (["a" - "z", "A" - "Z"])?) ) ["0"-"9"] ) | ("_" ["a" - "z", "A" - "Z"]) | (["a" - "z", "A" - "Z"]) )* ( ("_") | (["a" - "z", "A" - "Z"]) | (["a" - "z", "A" - "Z"] "_") | ("_" ["a" - "z", "A" - "Z"]) )>
}

// Removido de acordo com correção prof.
//TOKEN : {
//    <LOGICAL: ["<", ">", "&", "|", "!"] | "==" | "!=" | "<=" | ">=">


TOKEN : {
    <SPECIAL_SYMBOL: [".", ",", "{", "}", "[", "]", "(", ")"] | ":-" |
                     // Simbolos aritimético
                     ["+", "-", "*", "/", "%"] | "**" | "%%" |
                     // Simbolos lógicos
                     ["<", ">", "&", "|", "!"] | "==" | "!=" | "<=" | ">="
    >
}

TOKEN : {
    <ERROR_INVALID_SYMBOL: ["\u0000" - "\u00ff"] >
    |   <ERROR_UNFINISHED_LITERAL_CONSTANT: ("\"" (~["\""])*) | "'" (~["'"])* >
    |   <ERROR_INTEGER_CONSTANT_FORMAT: ["0"-"9"] ["0"-"9"] ["0"-"9"] (["0"-"9"])+ >
    |   <ERROR_FLOAT_CONSTANT_FORMAT: (["0"-"9"] ["0"-"9"] ["0"-"9"] ["0"-"9"] ["0"-"9"] (["0"-"9"])+ "." (["0"-"9"])*) | ((["0"-"9"])+ "." ["0"-"9"] ["0"-"9"] (["0"-"9"])+) >
}

void program() :
{
}
{
    [classlist()] <EOF>
}

void classlist() :
{
}
{
    classdecl() [classlist()]
}

void classdecl() :
{
}
{
    LOOKAHEAD(2)<RESERVED_WORDS> <IDENTIFIER> [<SPECIAL_SYMBOL> <LITERAL_CONSTANT> ] | abc()
}

void abc() :
{}
{
    <RESERVED_WORDS>
}