package br.univali.comp.parser;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ImpCA_LexConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SPACE = 4;
  /** RegularExpression Id. */
  int AND = 10;
  /** RegularExpression Id. */
  int BEGIN = 11;
  /** RegularExpression Id. */
  int BOOLEAN = 12;
  /** RegularExpression Id. */
  int CONST = 13;
  /** RegularExpression Id. */
  int DO = 14;
  /** RegularExpression Id. */
  int ELSE = 15;
  /** RegularExpression Id. */
  int END = 16;
  /** RegularExpression Id. */
  int FALSE = 17;
  /** RegularExpression Id. */
  int IF = 18;
  /** RegularExpression Id. */
  int INTEGER = 19;
  /** RegularExpression Id. */
  int MAIN = 20;
  /** RegularExpression Id. */
  int NOT = 21;
  /** RegularExpression Id. */
  int OR = 22;
  /** RegularExpression Id. */
  int PROGRAM = 23;
  /** RegularExpression Id. */
  int REAL = 24;
  /** RegularExpression Id. */
  int RETURN = 25;
  /** RegularExpression Id. */
  int THEN = 26;
  /** RegularExpression Id. */
  int TRUE = 27;
  /** RegularExpression Id. */
  int VAR = 28;
  /** RegularExpression Id. */
  int VOID = 29;
  /** RegularExpression Id. */
  int WHILE = 30;
  /** RegularExpression Id. */
  int ADD = 31;
  /** RegularExpression Id. */
  int SUB = 32;
  /** RegularExpression Id. */
  int MUL = 33;
  /** RegularExpression Id. */
  int DIV = 34;
  /** RegularExpression Id. */
  int MOD = 35;
  /** RegularExpression Id. */
  int EQ = 36;
  /** RegularExpression Id. */
  int NOTEQ = 37;
  /** RegularExpression Id. */
  int GT = 38;
  /** RegularExpression Id. */
  int LT = 39;
  /** RegularExpression Id. */
  int LE = 40;
  /** RegularExpression Id. */
  int GE = 41;
  /** RegularExpression Id. */
  int LBR = 42;
  /** RegularExpression Id. */
  int RBR = 43;
  /** RegularExpression Id. */
  int COMMA = 44;
  /** RegularExpression Id. */
  int SEMIC = 45;
  /** RegularExpression Id. */
  int COLON = 46;
  /** RegularExpression Id. */
  int DOT = 47;
  /** RegularExpression Id. */
  int ASSIGN = 48;
  /** RegularExpression Id. */
  int QUES = 49;
  /** RegularExpression Id. */
  int EXCLAM = 50;
  /** RegularExpression Id. */
  int QUOTE = 51;
  /** RegularExpression Id. */
  int BSL = 52;
  /** RegularExpression Id. */
  int US = 53;
  /** RegularExpression Id. */
  int TILDA = 54;
  /** RegularExpression Id. */
  int ACCENT = 55;
  /** RegularExpression Id. */
  int AT = 56;
  /** RegularExpression Id. */
  int HASH = 57;
  /** RegularExpression Id. */
  int DLLR = 58;
  /** RegularExpression Id. */
  int CARET = 59;
  /** RegularExpression Id. */
  int AMP = 60;
  /** RegularExpression Id. */
  int PIPE = 61;
  /** RegularExpression Id. */
  int CBL = 62;
  /** RegularExpression Id. */
  int CBR = 63;
  /** RegularExpression Id. */
  int SQBL = 64;
  /** RegularExpression Id. */
  int SQBR = 65;
  /** RegularExpression Id. */
  int APOST = 66;
  /** RegularExpression Id. */
  int POUND = 67;
  /** RegularExpression Id. */
  int EURO = 68;
  /** RegularExpression Id. */
  int BOOL = 69;
  /** RegularExpression Id. */
  int DIGIT = 70;
  /** RegularExpression Id. */
  int INT = 71;
  /** RegularExpression Id. */
  int R1 = 72;
  /** RegularExpression Id. */
  int R2 = 73;
  /** RegularExpression Id. */
  int REALNO = 74;
  /** RegularExpression Id. */
  int CHAR = 75;
  /** RegularExpression Id. */
  int STRING = 76;
  /** RegularExpression Id. */
  int X = 77;
  /** RegularExpression Id. */
  int ID = 78;

  /** Lexical state. */
  int COMMENT = 0;
  /** Lexical state. */
  int DEFAULT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"/-\"",
    "\"-/\"",
    "<token of kind 3>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"/-\"",
    "\"AND\"",
    "\"BEGIN\"",
    "\"BOOLEAN\"",
    "\"CONST\"",
    "\"DO\"",
    "\"ELSE\"",
    "\"END\"",
    "\"FALSE\"",
    "\"IF\"",
    "\"INTEGER\"",
    "\"MAIN\"",
    "\"NOT\"",
    "\"OR\"",
    "\"PROGRAM\"",
    "\"REAL\"",
    "\"RETURN\"",
    "\"THEN\"",
    "\"TRUE\"",
    "\"VAR\"",
    "\"VOID\"",
    "\"WHILE\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\".\"",
    "\":=\"",
    "\"?\"",
    "\"!\"",
    "\"\\\"\"",
    "\"\\\\\"",
    "\"_\"",
    "\"~\"",
    "\"`\"",
    "\"@\"",
    "\"#\"",
    "\"$\"",
    "\"^\"",
    "\"&\"",
    "\"|\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"\\\'\"",
    "\"\\u00c2\\u00a3\"",
    "\"\\u00e2\\u201a\\u00ac\"",
    "<BOOL>",
    "<DIGIT>",
    "<INT>",
    "<R1>",
    "<R2>",
    "<REALNO>",
    "<CHAR>",
    "<STRING>",
    "<X>",
    "<ID>",
  };

}
