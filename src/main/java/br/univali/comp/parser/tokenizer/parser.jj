options {
    STATIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(Tokenizer)
package br.univali.comp.parser.tokenizer;


public class Tokenizer {
    private StringBuilder results = new StringBuilder();

    public String getTokens(String args[], String textToAnalyze){
        Tokenizer tokenizer;
                    if(args.length == 0 && textToAnalyze.equals("")){
            			System.out.println("Reading from standard input!");
            			tokenizer = new Tokenizer(System.in);
            		}
                    else if(args.length == 0 && textToAnalyze.length() > 0){
                        System.out.println("Reading from received text!");
                        java.io.InputStream targetStream = new java.io.ByteArrayInputStream(textToAnalyze.getBytes());
                        tokenizer = new Tokenizer(targetStream);
                    }
            		else if(args.length == 1){
            			try{
                            tokenizer = new Tokenizer(new java.io.FileInputStream(args[0]));
            			}
            			catch(java.io.FileNotFoundException e){
            				System.err.println(args[0] + " was not found." );
            				System.err.println(e);
            				return args[0] + " was not found.";
            			}
            		}
            		else{
            			System.out.println("Use:\njava Tokenizer < inputFile");
            			System.out.println("or java Tokenizer inputFile");
            			return "Use:java Tokenizer < inputFile";
            		}
            		for(Token t = getNextToken(); t.kind != EOF; t = getNextToken()){
            		    switch(t.kind){
                                case NUMERO_INTEIRO:{
                                    System.out.println("Token: '"+t.image+"' - Type: NUMERO_INTEIRO-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    results.append("Token: '"+t.image+"' - Type: NUMERO_INTEIRO-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    break;
                                }
                                case NUMERO_REAL:{
                                    System.out.println("Token: '"+t.image+"' - Type: NUMERO_REAL-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    results.append("Token: '"+t.image+"' - Type: NUMERO_REAL-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    break;
                                }
                                case ARITMETICO:{
                                    System.out.println("Token: '"+t.image+"' - Type: ARITMETICO-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    results.append("Token: '"+t.image+"' - Type: ARITMETICO-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    break;
                                }
                                case IDENTIFICADOR:{
                                    System.out.println("Token: '"+t.image+"' - Type: IDENTIFICADOR-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    results.append("Token: '"+t.image+"' - Type: IDENTIFICADOR-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    break;
                                }
                                case LOGICO:{
                                    System.out.println("Token: '"+t.image+"' - Type: LOGICO-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    results.append("Token: '"+t.image+"' - Type: LOGICO-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    break;
                                }
                                case ESPECIAIS:{
                                    System.out.println("Token: '"+t.image+"' - Type: ESPECIAIS-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    results.append("Token: '"+t.image+"' - Type: ESPECIAIS-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    break;
                                }
                                case PALAVRAS_RESERVADAS:{
                                    System.out.println("Token: '"+t.image+"' - Type: PALAVRAS_RESERVADAS-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    results.append("Token: '"+t.image+"' - Type: PALAVRAS_RESERVADAS-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    break;
                                }
                                default:{
                                    System.out.println("<DEFAULT UNFOUND: Image:"+t.image+ " | Kind:" +t.kind +">"+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    results.append("<DEFAULT UNFOUND: Image:"+t.image+ " | Kind:" +t.kind +">"+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    break;
                                }
                            }
            		}
            		System.out.println("<EOF>");
            		results.append("<EOF>");
            		return results.toString();
    }


    public static void main(String args[]) {
        Tokenizer parser = new Tokenizer( System.in ) ;
        parser.getTokens(args, "");
        System.out.println(parser.results);
    }

    public String getResults(){
            return results.toString();
    }

}
PARSER_END(Tokenizer)

TOKEN_MGR_DECLS :
{
	static int commentLevel = 0 ;
}
<COMMENT> SKIP :{
	":-"	{	commentLevel++;		}
|	"-:"	{	commentLevel--;
			    if(commentLevel == 0){  SwitchTo(DEFAULT); }
		    }
| 	< ~[] >
}

//Skip the following elements
SKIP : {
    <SPACE : " ">
|   "\t" | "\n" | "\r" | "\r\n"
|	":-" { commentLevel++; } : COMMENT
}

TOKEN : {
    <NUMERO_INTEIRO: ["0"-"9"] (["0"-"9"])? (["0"-"9"])? >
}
TOKEN : {
    <NUMERO_REAL: ["0"-"9"] (["0"-"9"])? (["0"-"9"])? (["0"-"9"])? (["0"-"9"])? "." ["0"-"9"] (["0"-"9"])? >
}
TOKEN: {
    <ARITMETICO: ["+", "-", "*", "/", "%"] | "**" | "%%" >
}
TOKEN : {
    <PALAVRAS_RESERVADAS: "program" | "define" | "not" | "variable" | "is" |
    "execute" | "set" | "to" | "get" | "put" | "loop" | "while" | "true" |
    "false" | "do" | "natural" | "real" | "char" | "boolean">
}
//TODO - Ajustar identificador conforme quest√£o b da 3 - para resolver.
TOKEN : {
    <IDENTIFICADOR: ["a" - "z", "A" - "Z", "_"] (["a" - "z", "A" - "Z", "0" - "9", "_"])*>
}
TOKEN : {
    <LOGICO: ["<", ">", "&", "|", "!"] | "==" | "!=" | "<=" | ">=">
}
TOKEN : {
    <ESPECIAIS: [".", ",", "{", "}", "[", "]", "(", ")"] >
}
