options {
    STATIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(Tokenizer)
package br.univali.comp.parser.tokenizer;


public class Tokenizer {
    private StringBuilder results = new StringBuilder();

    public void handleToken()  {
            try {
                Token t = null;
                t = getNextToken();
                if(t.kind == EOF) return;
                switch(t.kind){
                    case INTEGER_NUMBER:{
                        System.out.println("Token: '"+t.image+"' - Type: INTEGER_NUMBER-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        results.append("Token: '"+t.image+"' - Type: INTEGER_NUMBER-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case FLOAT_NUMBER:{
                        System.out.println("Token: '"+t.image+"' - Type: FLOAT_NUMBER-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        results.append("Token: '"+t.image+"' - Type: FLOAT_NUMBER-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case ARITHMETIC:{
                        System.out.println("Token: '"+t.image+"' - Type: ARITHMETIC-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        results.append("Token: '"+t.image+"' - Type: ARITHMETIC-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case IDENTIFIER:{
                        System.out.println("Token: '"+t.image+"' - Type: IDENTIFIER-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        results.append("Token: '"+t.image+"' - Type: IDENTIFIER-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case LOGICAL:{
                        System.out.println("Token: '"+t.image+"' - Type: LOGICAL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        results.append("Token: '"+t.image+"' - Type: LOGICAL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case SPECIAL:{
                        System.out.println("Token: '"+t.image+"' - Type: SPECIAL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        results.append("Token: '"+t.image+"' - Type: SPECIAL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    case RESERVED_WORDS:{
                        System.out.println("Token: '"+t.image+"' - Type: RESERVED_WORDS-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        results.append("Token: '"+t.image+"' - Type: RESERVED_WORDS-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    //TO generic errors
//                    case ERROR:{
//                        System.out.println("ERROR: '"+t.image+"' - Type: Invalid Token-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
//                        results.append("ERROR: '"+t.image+"' - Type: Invalid Token-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
//                        break;
//                    }
                    case ERROR_INVALID_SYMBOL:{
                        System.out.println("ERROR: '"+t.image+"' - Type: ERROR_INVALID_SYMBOL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        results.append("ERROR: '"+t.image+"' - Type: ERROR_INVALID_SYMBOL-"+t.kind+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                    default:{
                        System.out.println("<DEFAULT UNFOUND: Image:"+t.image+ " | Kind:" +t.kind +">"+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        results.append("<DEFAULT UNFOUND: Image:"+t.image+ " | Kind:" +t.kind +">"+" - Line-Column: "+t.beginLine+"-"+t.beginColumn+"\n");
                        break;
                    }
                }
                handleToken();
            }catch(Error error){
                results.append("Error - " + error.getMessage() + "\n");
                System.out.println(error.toString());
                handleToken();
            }
        }

    public String getTokens(String args[], String textToAnalyze) {
            Tokenizer tokenizer;
            if(args.length == 0){
                System.out.println("Reading from received text!");
                java.io.InputStream targetStream = new java.io.ByteArrayInputStream(textToAnalyze.getBytes());
                tokenizer = new Tokenizer(targetStream);
            }
                else if(args.length == 1){
                        try{
                    tokenizer = new Tokenizer(new java.io.FileInputStream(args[0]));
                        }
                        catch(java.io.FileNotFoundException e){
                                System.err.println(args[0] + " was not found." );
                                System.err.println(e);
                                return args[0] + " was not found.";
                        }
                }
                else{
                        System.out.println("Use:\njava Tokenizer < inputFile");
                        System.out.println("or java Tokenizer inputFile");
                        return "Use:java Tokenizer < inputFile";
                }

                this.handleToken();

                System.out.println("<EOF>");
                results.append("<EOF>");
                return results.toString();
        }


    public static void main(String args[])  throws ParseException {
        Tokenizer parser = new Tokenizer( System.in ) ;
        parser.getTokens(args, "");
        System.out.println(parser.results);
    }

    public String getResults(){
            return results.toString();
    }

}
PARSER_END(Tokenizer)

TOKEN_MGR_DECLS :
{
	static int commentLevel = 0 ;
}




//Skip the following elements
SKIP : {
    <SPACE : " "> |
    <EOL: "\n"> |
    <SKIP_MARKERS: "\t" | "\r" | "\r\n" | <SPACE> | <EOL>>

}

SKIP:{
    <COMMENT_LINE: ":-" (~["\n"])* <EOL>>
|    <COMMENT_BLOCK: ":*" (~[])* "*:">
}

TOKEN : {
    <INTEGER_NUMBER: ["0"-"9"] (["0"-"9"])? (["0"-"9"])? >
}
TOKEN : {
    <FLOAT_NUMBER: ["0"-"9"] (["0"-"9"])? (["0"-"9"])? (["0"-"9"])? (["0"-"9"])? "." ["0"-"9"] (["0"-"9"])? >
}
TOKEN: {
    <ARITHMETIC: ["+", "-", "*", "/", "%"] | "**" | "%%" >
}
TOKEN : {
    <RESERVED_WORDS: "program" | "define" | "not" | "variable" | "is" |
    "execute" | "set" | "to" | "get" | "put" | "loop" | "while" | "true" |
    "false" | "do" | "natural" | "real" | "char" | "boolean">
}
TOKEN : {
    <IDENTIFIER: ( ( ( (["a" - "z", "A" - "Z"] ("_")?) | ("_" (["a" - "z", "A" - "Z"])?) ) ["0"-"9"] ) | ("_" ["a" - "z", "A" - "Z"]) | (["a" - "z", "A" - "Z"]) )* ( ("_") | (["a" - "z", "A" - "Z"]) | (["a" - "z", "A" - "Z"] "_") | ("_" ["a" - "z", "A" - "Z"]) )>
}
TOKEN : {
    <LOGICAL: ["<", ">", "&", "|", "!"] | "==" | "!=" | "<=" | ">=">
}
TOKEN : {
    <SPECIAL: [".", ",", "{", "}", "[", "]", "(", ")"] >
}

TOKEN : {
   <ERROR_INVALID_SYMBOL: "#" | "$"| "¨"| "`"| "´"| "?"| "°"| "ª"| "°"| "'" >
}