/* Tokenizer.java */
/* Generated By:JavaCC: Do not edit this line. Tokenizer.java */
package br.univali.comp.parser.tokenizer;


public class Tokenizer implements TokenizerConstants {
    private static StringBuilder results = new StringBuilder();

    public static String getTokens(String args[], String textToAnalyze){
        Tokenizer tokenizer;
                    if(args.length == 0 && textToAnalyze.equals("")){
                                System.out.println("Reading from standard input!");
                                tokenizer = new Tokenizer(System.in);
                        }
                    else if(args.length == 0 && textToAnalyze.length() > 0){
                        System.out.println("Reading from received text!");
                        java.io.InputStream targetStream = new java.io.ByteArrayInputStream(textToAnalyze.getBytes());
                        tokenizer = new Tokenizer(targetStream);
                    }
                        else if(args.length == 1){
                                try{
                            tokenizer = new Tokenizer(new java.io.FileInputStream(args[0]));
                                }
                                catch(java.io.FileNotFoundException e){
                                        System.err.println(args[0] + " was not found." );
                                        System.err.println(e);
                                        return args[0] + " was not found.";
                                }
                        }
                        else{
                                System.out.println("Use:\njava Tokenizer < inputFile");
                                System.out.println("or java Tokenizer inputFile");
                                return "Use:java Tokenizer < inputFile";
                        }
                        for(Token t = getNextToken(); t.kind != EOF; t = getNextToken()){
                            switch(t.kind){
                                case NUMERO_INTEIRO:{
                                    System.out.println("Token: '"+t.image+"' - Type: NUMERO_INTEIRO-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    results.append("Token: '"+t.image+"' - Type: NUMERO_INTEIRO-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    break;
                                }
                                case NUMERO_REAL:{
                                    System.out.println("Token: '"+t.image+"' - Type: NUMERO_REAL-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    results.append("Token: '"+t.image+"' - Type: NUMERO_REAL-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    break;
                                }
                                case ARITMETICO:{
                                    System.out.println("Token: '"+t.image+"' - Type: ARITMETICO-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    results.append("Token: '"+t.image+"' - Type: ARITMETICO-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    break;
                                }
                                case IDENTIFICADOR:{
                                    System.out.println("Token: '"+t.image+"' - Type: IDENTIFICADOR-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    results.append("Token: '"+t.image+"' - Type: IDENTIFICADOR-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    break;
                                }
                                case LOGICO:{
                                    System.out.println("Token: '"+t.image+"' - Type: LOGICO-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    results.append("Token: '"+t.image+"' - Type: LOGICO-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    break;
                                }
                                case ESPECIAIS:{
                                    System.out.println("Token: '"+t.image+"' - Type: ESPECIAIS-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    results.append("Token: '"+t.image+"' - Type: ESPECIAIS-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    break;
                                }
                                case PALAVRAS_RESERVADAS:{
                                    System.out.println("Token: '"+t.image+"' - Type: PALAVRAS_RESERVADAS-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    results.append("Token: '"+t.image+"' - Type: PALAVRAS_RESERVADAS-"+t.kind+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    break;
                                }
                                default:{
                                    System.out.println("<DEFAULT UNFOUND: Image:"+t.image+ " | Kind:" +t.kind +">"+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    results.append("<DEFAULT UNFOUND: Image:"+t.image+ " | Kind:" +t.kind +">"+" - Linha-Coluna: "+t.beginLine+"-"+t.beginColumn+"\n");
                                    break;
                                }
                            }
                        }
                        System.out.println("<EOF>");
                        results.append("<EOF>");
                        return results.toString();
    }


    public static void main(String args[]) {
        getTokens(args, "");
        System.out.println(results);
    }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TokenizerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}

  /** Constructor with InputStream. */
  public Tokenizer(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Tokenizer(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new TokenizerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Tokenizer(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new TokenizerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new TokenizerTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Constructor with generated Token Manager. */
  public Tokenizer(TokenizerTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  public void ReInit(TokenizerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[17];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 17; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
