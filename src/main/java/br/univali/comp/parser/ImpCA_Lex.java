package br.univali.comp.parser;/* ImpCA_Lex.java */
/* Generated By:JavaCC: Do not edit this line. ImpCA_Lex.java */

import br.univali.comp.parser.ImpCA_LexConstants;

public class ImpCA_Lex implements ImpCA_LexConstants {
        public static void main(String args[]){
        ImpCA_Lex Tokeniser;
        if(args.length == 0){
                        System.out.println("Reading from standard input!");
                        Tokeniser = new ImpCA_Lex(System.in);
                }
                else if(args.length == 1){
                        try{
                Tokeniser = new ImpCA_Lex(new java.io.FileInputStream(args[0]));
                        }
                        catch(java.io.FileNotFoundException e){
                                System.err.println(args[0] + " was not found." );
                                System.err.println(e);
                                return;
                        }
                }
                else{
                        System.out.println("Use:\njava ImpCA_Lex < inputFile");
                        System.out.println("or java ImpCA_Lex inputFile");
                        return;
                }

        //Printing the tokens
                for(Token t = getNextToken(); t.kind != EOF; t = getNextToken()){
            switch(t.kind){
                case ID:{
                    System.out.print("<ID("+t.image+")> ");
                    break;
                }
                 case AND:{
                    System.out.print("<AND> ");
                    break;
                }
                 case BEGIN:{
                    System.out.print("<BEGIN> ");
                    break;
                }
                 case BOOLEAN:{
                    System.out.print("<BOOLEAN> ");
                    break;
                }
                 case CONST:{
                    System.out.print("<CONST> ");
                    break;
                }
                 case DO:{
                    System.out.print("<DO> ");
                    break;
                }
                 case ELSE:{
                    System.out.print("<ELSE> ");
                    break;
                }
                case END:{
                    System.out.print("<END> ");
                    break;
                }
                case IF:{
                    System.out.print("<IF> ");
                    break;
                }
                case INTEGER:{
                    System.out.print("<INTEGER> ");
                    break;
                }
                case MAIN:{
                    System.out.print("<MAIN> ");
                    break;
                }
                case NOT:{
                    System.out.print("<NOT> ");
                    break;
                }
                case OR:{
                    System.out.print("<OR> ");
                    break;
                }
                case PROGRAM:{
                    System.out.print("<PROGRAM> ");
                    break;
                }
                case REAL:{
                    System.out.print("<REAL> ");
                    break;
                }
                case RETURN:{
                    System.out.print("<RETURN> ");
                    break;
                }
                case THEN:{
                    System.out.print("<THEN> ");
                    break;
                }
                case VAR:{
                    System.out.print("<VAR> ");
                    break;
                }
                case VOID:{
                    System.out.print("<VOID> ");
                    break;
                }
                case WHILE:{
                    System.out.print("<WHILE> ");
                    break;
                }
                case ADD:{
                    System.out.print("<ADD> ");
                    break;
                }
                case SUB:{
                    System.out.print("<SUB> ");
                    break;
                }
                case MUL:{
                    System.out.print("<MUL> ");
                    break;
                }
                case DIV:{
                    System.out.print("<DIV> ");
                    break;
                }
                case MOD:{
                    System.out.print("<MOD> ");
                    break;
                }
                case EQ:{
                    System.out.print("<EQ> ");
                    break;
                }
                case NOTEQ:{
                    System.out.print("<NOTEQ> ");
                    break;
                }
                case GT:{
                    System.out.print("<GT> ");
                    break;
                }
                case LT:{
                    System.out.print("<LT> ");
                    break;
                }
                case LE:{
                    System.out.print("<LE> ");
                    break;
                }
                case GE:{
                    System.out.print("<GE> ");
                    break;
                }
                case LBR:{
                    System.out.print("<LBR> ");
                    break;
                }
                case RBR:{
                    System.out.print("<RBR> ");
                    break;
                }
                case COMMA:{
                    System.out.print("<COMMA> ");
                    break;
                }
                case SEMIC:{
                    System.out.print("<SEMIC> ");
                    break;
                }
                case COLON:{
                    System.out.print("<COLON> ");
                    break;
                }
                case DOT:{
                    System.out.print("<DOT> ");
                    break;
                }
                case ASSIGN:{
                    System.out.print("<ASSIGN> ");
                    break;
                }
                case QUES:{
                    System.out.print("<QUES> ");
                    break;
                }
                case EXCLAM:{
                    System.out.print("<EXCLAM> ");
                    break;
                }
                case US:{
                    System.out.print("<US> ");
                    break;
                }
                case BOOL:{
                    System.out.print("<BOOL("+t.image+ ")> ");
                    break;
                }
                case INT:{
                    System.out.print("<INT("+t.image+")> ");
                    break;
                }
                case REALNO:{
                    System.out.print("<REALNO("+t.image+")> ");
                    break;
                }
                case STRING:{
                    System.out.print("<STRING("+t.image+")> ");
                    break;
                }
                //Shouldn't ever be printed.
                default:{
                    System.out.print("<DEFAULT UNFOUND: Image:"+t.image+ " | Kind:" +t.kind +">");
                    break;
                }
            }
        }
        //Printing End of File Token after All tokens have expired
        System.out.print("<EOF>");
        }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ImpCA_LexTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {};
	}

  /** Constructor with InputStream. */
  public ImpCA_Lex(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ImpCA_Lex(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ImpCA_LexTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ImpCA_Lex(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new ImpCA_LexTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ImpCA_LexTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Constructor with generated Token Manager. */
  public ImpCA_Lex(ImpCA_LexTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  public void ReInit(ImpCA_LexTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[79];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 79; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
